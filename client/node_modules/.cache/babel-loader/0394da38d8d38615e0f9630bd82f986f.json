{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Keys, classNames, guid, useDir, getTabIndex, dispatchEvent, createPropsContext, usePropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { messages, checkboxValidation, checkboxOptionalText } from './../messages';\n/**\n * Represents the PropsContext of the `Checkbox` component.\n * Used for global configuration of all `Checkbox` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var CheckboxPropsContext = createPropsContext();\n/**\n * Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <Checkbox />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var Checkbox = React.forwardRef(function (directProps, target) {\n  var _a;\n  validatePackage(packageMetadata);\n  var props = usePropsContext(CheckboxPropsContext, directProps);\n  var _b = props,\n    ariaDescribedBy = _b.ariaDescribedBy,\n    ariaLabelledBy = _b.ariaLabelledBy,\n    checked = _b.checked,\n    className = _b.className,\n    children = _b.children,\n    defaultChecked = _b.defaultChecked,\n    disabled = _b.disabled,\n    defaultValue = _b.defaultValue,\n    id = _b.id,\n    size = _b.size,\n    rounded = _b.rounded,\n    label = _b.label,\n    labelPlacement = _b.labelPlacement,\n    name = _b.name,\n    labelOptional = _b.labelOptional,\n    onChange = _b.onChange,\n    onFocus = _b.onFocus,\n    onBlur = _b.onBlur,\n    tabIndex = _b.tabIndex,\n    value = _b.value,\n    required = _b.required,\n    valid = _b.valid,\n    validationMessage = _b.validationMessage,\n    validityStyles = _b.validityStyles,\n    // Removed to support direct use in Form Field component\n    visited = _b.visited,\n    touched = _b.touched,\n    modified = _b.modified,\n    others = __rest(_b, [\"ariaDescribedBy\", \"ariaLabelledBy\", \"checked\", \"className\", \"children\", \"defaultChecked\", \"disabled\", \"defaultValue\", \"id\", \"size\", \"rounded\", \"label\", \"labelPlacement\", \"name\", \"labelOptional\", \"onChange\", \"onFocus\", \"onBlur\", \"tabIndex\", \"value\", \"required\", \"valid\", \"validationMessage\", \"validityStyles\", \"visited\", \"touched\", \"modified\"]);\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement,\n      get name() {\n        return elementRef.current && elementRef.current.name;\n      }\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var _c = React.useState(defaultChecked),\n    stateChecked = _c[0],\n    setStateChecked = _c[1];\n  var _d = React.useState(defaultValue),\n    stateValue = _d[0],\n    setStateValue = _d[1];\n  var valueIsBoolean = typeof value === 'boolean' || value === null;\n  var isCheckedControlled = checked !== undefined;\n  var isValueControlled = valueIsBoolean;\n  var currentValue = isValueControlled ? value : stateValue;\n  var currentChecked = isCheckedControlled ? checked : isValueControlled ? undefined : stateChecked;\n  var useValueAsChecked = currentChecked === undefined && currentValue;\n  var checkedProp = useValueAsChecked ? currentValue : currentChecked;\n  var valueProp = useValueAsChecked || isValueControlled ? value === null ? value : undefined : value || currentValue;\n  var indeterminateProp = checkedProp === null || valueProp === null;\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var localizationService = useLocalization();\n  var localizeMessage = function localizeMessage(message) {\n    return localizationService.toLanguageString(message, messages[message]);\n  };\n  var defaultValidationMessage = localizeMessage(checkboxValidation);\n  var optionalMessage = localizeMessage(checkboxOptionalText);\n  var isValid = valid !== undefined ? valid : !required ? true : currentChecked ? true : false;\n  React.useEffect(function () {\n    if (elementRef.current && elementRef.current.setCustomValidity) {\n      elementRef.current.setCustomValidity(isValid ? '' : validationMessage || defaultValidationMessage);\n    }\n  }, [isValid, validationMessage, defaultValidationMessage]);\n  var setValue = React.useCallback(function (e, val) {\n    if (!isValueControlled && !disabled) {\n      setStateValue(val);\n      if (!isCheckedControlled && !disabled) {\n        setStateChecked(val);\n      }\n    }\n    if (onChange && !disabled) {\n      dispatchEvent(onChange, e, __assign(__assign({}, getImperativeHandle()), {\n        value: val\n      }), {\n        value: val\n      });\n    }\n  }, [isCheckedControlled, disabled, onChange, isValueControlled, getImperativeHandle]);\n  var handleChange = React.useCallback(function (e) {\n    var newValue = e.target.checked;\n    setValue(e, newValue);\n  }, [setValue, value]);\n  var handleKeyDown = React.useCallback(function (e) {\n    if (disabled) {\n      return;\n    }\n    var keyCode = e.keyCode;\n    var currentVal = e.currentTarget.checked;\n    if (keyCode === Keys.space) {\n      e.preventDefault();\n      e.stopPropagation();\n      setValue(e, !currentVal);\n    }\n  }, [disabled, setValue]);\n  var handleKeyUp = React.useCallback(function (e) {\n    if (disabled) {\n      return;\n    }\n    var keyCode = e.keyCode;\n    if (keyCode === Keys.space) {\n      e.preventDefault();\n    }\n  }, [disabled]);\n  var handleFocus = React.useCallback(function (e) {\n    if (onFocus && !disabled) {\n      dispatchEvent(onFocus, e, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, disabled, getImperativeHandle]);\n  var handleBlur = React.useCallback(function (e) {\n    if (onBlur && !disabled) {\n      dispatchEvent(onBlur, e, getImperativeHandle(), undefined);\n    }\n  }, [onBlur, disabled, getImperativeHandle]);\n  var dir = useDir(elementRef, props.dir);\n  var checkboxClasses = classNames({\n    'k-disabled': disabled\n  }, className);\n  var inputProps = __assign(__assign({\n    type: 'checkbox',\n    className: classNames('k-checkbox', (_a = {}, _a[\"k-checkbox-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-indeterminate'] = indeterminateProp, _a['k-disabled'] = disabled, _a['k-invalid k-invalid'] = !(isValid || validityStyles !== undefined || validityStyles === true), _a)),\n    ref: elementRef,\n    name: name,\n    id: id || calculatedId,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    checked: Boolean(checkedProp),\n    disabled: disabled,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    role: 'checkbox',\n    required: required !== undefined ? required : false,\n    'aria-checked': currentChecked || checkedProp ? true : indeterminateProp ? 'mixed' : false,\n    'aria-disabled': disabled || undefined\n  }, others), {\n    onChange: handleChange,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  });\n  var checkboxInput = React.createElement(React.Fragment, null,\n  // removing value prop is required due to bug in react where\n  // value set to undefined override default submit value\n  valueProp === undefined ? React.createElement(\"input\", __assign({}, inputProps)) : React.createElement(\"input\", __assign({}, inputProps, {\n    value: valueIsBoolean ? undefined : valueProp === null ? '' : valueProp\n  })));\n  var checkboxLabel = React.createElement(React.Fragment, null, label !== undefined ? React.createElement(\"label\", {\n    className: 'k-checkbox-label',\n    htmlFor: id || calculatedId,\n    style: {\n      userSelect: 'none'\n    }\n  }, label, labelOptional && React.createElement(\"span\", {\n    className: \"k-label-optional\"\n  }, optionalMessage)) : null);\n  return React.createElement(React.Fragment, null, labelPlacement === 'before' ? React.createElement(\"span\", {\n    className: checkboxClasses,\n    dir: 'rtl'\n  }, checkboxInput, checkboxLabel, children) : React.createElement(\"span\", {\n    className: checkboxClasses,\n    dir: dir\n  }, checkboxInput, checkboxLabel, children));\n});\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  defaultChecked: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  dir: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  rounded: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  ariaLabelledBy: PropTypes.string,\n  ariaDescribedBy: PropTypes.string,\n  label: PropTypes.any,\n  labelPlacement: PropTypes.string,\n  labelOptional: PropTypes.bool,\n  name: PropTypes.string,\n  tabIndex: PropTypes.number,\n  value: PropTypes.any,\n  validationMessage: PropTypes.string,\n  required: PropTypes.bool,\n  validate: PropTypes.bool,\n  valid: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n};\nvar defaultProps = {\n  size: 'medium',\n  rounded: 'medium'\n};\nCheckbox.defaultProps = defaultProps;\nCheckbox.displayName = 'KendoCheckbox';","map":null,"metadata":{},"sourceType":"module"}