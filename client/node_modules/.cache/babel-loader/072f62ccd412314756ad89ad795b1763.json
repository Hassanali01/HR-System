{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport * as React from 'react';\nimport { parseColor } from './utils/color-parser';\nimport { isPresent } from './utils/misc';\nimport { Input } from '../input/Input';\n/**\n * @hidden\n */\nvar HexInput = /** @class */function (_super) {\n  __extends(HexInput, _super);\n  function HexInput(props) {\n    var _this = _super.call(this, props) || this;\n    _this.onChange = function (event) {\n      var hex = event.target.value;\n      var value = parseColor(hex, 'rgba');\n      _this.setState({\n        hex: hex\n      });\n      if (isPresent(value)) {\n        _this.props.onHexChange(hex, value, event);\n      }\n    };\n    _this.onBlur = function () {\n      if (!isPresent(parseColor(_this.state.hex, 'rgba'))) {\n        _this.setState({\n          hex: _this.state.originalHex\n        });\n      }\n    };\n    _this.state = {\n      hex: _this.props.hex,\n      originalHex: _this.props.hex\n    };\n    return _this;\n  }\n  HexInput.prototype.render = function () {\n    return React.createElement(Input, {\n      value: this.state.hex,\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      disabled: this.props.disabled\n    });\n  };\n  HexInput.getDerivedStateFromProps = function (props, state) {\n    if (props.hex !== state.originalHex) {\n      return {\n        hex: props.hex,\n        originalHex: props.hex\n      };\n    }\n    return null;\n  };\n  return HexInput;\n}(React.Component);\nexport default HexInput;","map":null,"metadata":{},"sourceType":"module"}