{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { guid, classNames, getTabIndex, dispatchEvent, useDir, createPropsContext, usePropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\n/**\n * Represents the PropsContext of the `TextArea` component.\n * Used for global configuration of all `TextArea` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var TextAreaPropsContext = createPropsContext();\n/**\n * Represents the [KendoReact TextArea component]({% slug overview_textarea %}).\n *\n *\n * Accepts properties of type [TextAreaProps]({% slug api_inputs_textareaprops %}).\n * Obtaining the `ref` returns an object of type [TextAreaHandle]({% slug api_inputs_textareahandle %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <TextArea />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nexport var TextArea = React.forwardRef(function (directProps, target) {\n  var _a;\n  var props = usePropsContext(TextAreaPropsContext, directProps);\n  var _b = props,\n    size = _b.size,\n    rounded = _b.rounded,\n    fillMode = _b.fillMode,\n    ariaDescribedBy = _b.ariaDescribedBy,\n    ariaLabelledBy = _b.ariaLabelledBy,\n    autoSize = _b.autoSize,\n    className = _b.className,\n    defaultValue = _b.defaultValue,\n    disabled = _b.disabled,\n    readOnly = _b.readOnly,\n    required = _b.required,\n    rows = _b.rows,\n    id = _b.id,\n    name = _b.name,\n    placeholder = _b.placeholder,\n    style = _b.style,\n    tabIndex = _b.tabIndex,\n    value = _b.value,\n    valid = _b.valid,\n    validationMessage = _b.validationMessage,\n    validityStyles = _b.validityStyles,\n    onChange = _b.onChange,\n    onFocus = _b.onFocus,\n    onBlur = _b.onBlur,\n    // Removed to support direct use in Form Field component\n    visited = _b.visited,\n    touched = _b.touched,\n    modified = _b.modified,\n    others = __rest(_b, [\"size\", \"rounded\", \"fillMode\", \"ariaDescribedBy\", \"ariaLabelledBy\", \"autoSize\", \"className\", \"defaultValue\", \"disabled\", \"readOnly\", \"required\", \"rows\", \"id\", \"name\", \"placeholder\", \"style\", \"tabIndex\", \"value\", \"valid\", \"validationMessage\", \"validityStyles\", \"onChange\", \"onFocus\", \"onBlur\", \"visited\", \"touched\", \"modified\"]);\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var _c = React.useState(defaultValue),\n    stateValue = _c[0],\n    setStateValue = _c[1];\n  var isControlled = value !== undefined;\n  var currentValue = isControlled ? value : stateValue;\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef,\n      focus: focusElement,\n      get value() {\n        return currentValue;\n      },\n      get name() {\n        return elementRef.current && elementRef.current.name;\n      }\n    };\n  }, [focusElement, currentValue]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var _d = React.useState('auto'),\n    textAreaHeight = _d[0],\n    setTextAreaHeight = _d[1];\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var dir = useDir(elementRef, props.dir);\n  var isValid = valid !== undefined ? valid : !required ? true : currentValue ? true : false;\n  React.useEffect(function () {\n    if (elementRef.current && elementRef.current.setCustomValidity) {\n      elementRef.current.setCustomValidity(isValid ? '' : validationMessage || '');\n    }\n  }, [isValid, validationMessage]);\n  React.useLayoutEffect(function () {\n    if (elementRef.current) {\n      setTextAreaHeight(\"\".concat(elementRef.current.scrollHeight, \"px\"));\n    }\n  }, [currentValue]);\n  var handleChange = React.useCallback(function (event) {\n    var newValue = event.target.value;\n    setTextAreaHeight('auto');\n    if (!isControlled && !disabled) {\n      setStateValue(newValue);\n    }\n    if (onChange && !disabled) {\n      dispatchEvent(onChange, event, __assign(__assign({}, getImperativeHandle()), {\n        value: newValue\n      }), {\n        value: newValue\n      });\n    }\n  }, [setStateValue, onChange, disabled, isControlled]);\n  var handleFocus = React.useCallback(function (event) {\n    if (onFocus && !disabled) {\n      dispatchEvent(onFocus, event, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, disabled]);\n  var handleBlur = React.useCallback(function (event) {\n    if (onBlur && !disabled) {\n      dispatchEvent(onBlur, event, getImperativeHandle(), undefined);\n    }\n  }, [onBlur, disabled]);\n  var textAreaProps = __assign(__assign({\n    id: id || calculatedId,\n    name: name,\n    className: 'k-input-inner !k-overflow-auto',\n    ref: elementRef,\n    disabled: disabled,\n    rows: rows,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    required: required,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    style: autoSize ? {\n      resize: 'none',\n      overflow: 'hidden',\n      height: textAreaHeight\n    } : {},\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-multiline': true,\n    'aria-disabled': disabled || undefined,\n    value: isControlled ? value : stateValue\n  }, others), {\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  });\n  return React.createElement(\"span\", {\n    className: classNames('k-input', 'k-textarea', (_a = {}, _a[\"k-input-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-input-\".concat(fillMode)] = fillMode, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-invalid'] = !(isValid || validityStyles !== undefined || validityStyles === true), _a['k-required'] = required, _a['k-disabled'] = disabled, _a), className),\n    style: style,\n    dir: dir\n  }, React.createElement(\"textarea\", __assign({}, textAreaProps)));\n});\nTextArea.propTypes = {\n  ariaDescribedBy: PropTypes.string,\n  ariaLabelledBy: PropTypes.string,\n  autoSize: PropTypes.bool,\n  className: PropTypes.string,\n  defaultValue: PropTypes.string,\n  dir: PropTypes.string,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  rows: PropTypes.number,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  style: PropTypes.object,\n  tabIndex: PropTypes.number,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), PropTypes.number]),\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n  fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])\n};\nvar defaultProps = {\n  size: 'medium',\n  rounded: 'medium',\n  fillMode: 'solid'\n};\nTextArea.displayName = 'KendoTextArea';\nTextArea.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}