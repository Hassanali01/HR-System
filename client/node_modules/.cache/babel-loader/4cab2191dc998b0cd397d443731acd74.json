{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { windowStage } from './StageEnum';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { messages, dialogsWindowMaximizeButton, dialogsWindowMinimizeButton, dialogsWindowRestoreButton, dialogsWindowCloseButton } from './messages';\n/**\n * @hidden\n */\nvar WindowTitleBarComponent = function WindowTitleBarComponent(props) {\n  var children = props.children,\n    onCloseButtonClick = props.onCloseButtonClick,\n    onMinimizeButtonClick = props.onMinimizeButtonClick,\n    onFullScreenButtonClick = props.onFullScreenButtonClick,\n    onRestoreButtonClick = props.onRestoreButtonClick,\n    onDoubleClick = props.onDoubleClick,\n    stage = props.stage,\n    forwardedRef = props.forwardedRef,\n    id = props.id;\n  var localization = useLocalization();\n  var minimizeButtonRender = props.minimizeButton ? React.createElement(props.minimizeButton, {\n    onClick: onMinimizeButtonClick,\n    stage: stage\n  }) : React.createElement(Button, {\n    fillMode: \"flat\",\n    icon: \"window-minimize\",\n    className: \"k-window-action\",\n    onClick: onMinimizeButtonClick,\n    \"aria-label\": localization.toLanguageString(dialogsWindowMinimizeButton, messages[dialogsWindowMinimizeButton])\n  });\n  var maximizeButtonRender = props.maximizeButton ? React.createElement(props.maximizeButton, {\n    onClick: onFullScreenButtonClick,\n    stage: stage\n  }) : React.createElement(Button, {\n    fillMode: \"flat\",\n    icon: \"window-maximize\",\n    className: \"k-window-action\",\n    onClick: onFullScreenButtonClick,\n    \"aria-label\": localization.toLanguageString(dialogsWindowMaximizeButton, messages[dialogsWindowMaximizeButton])\n  });\n  var restoreButtonRender = props.restoreButton ? React.createElement(props.restoreButton, {\n    onClick: onRestoreButtonClick,\n    stage: stage\n  }) : React.createElement(Button, {\n    fillMode: \"flat\",\n    icon: \"window-restore\",\n    className: \"k-window-action\",\n    onClick: onRestoreButtonClick,\n    \"aria-label\": localization.toLanguageString(dialogsWindowRestoreButton, messages[dialogsWindowRestoreButton])\n  });\n  var closeButtonRender = props.closeButton ? React.createElement(props.closeButton, {\n    onClick: onCloseButtonClick,\n    stage: stage\n  }) : React.createElement(Button, {\n    fillMode: \"flat\",\n    icon: \"close\",\n    className: \"k-window-action\",\n    onClick: onCloseButtonClick,\n    \"aria-label\": localization.toLanguageString(dialogsWindowCloseButton, messages[dialogsWindowCloseButton])\n  });\n  return React.createElement(\"div\", {\n    className: \"k-window-titlebar k-dialog-titlebar\",\n    style: {\n      touchAction: 'none'\n    },\n    ref: forwardedRef,\n    onDoubleClick: onDoubleClick\n  }, React.createElement(\"div\", {\n    className: \"k-window-title\",\n    id: id\n  }, children ? children : ''), React.createElement(\"div\", {\n    className: \"k-window-actions\"\n  }, stage === windowStage.DEFAULT && minimizeButtonRender, stage === windowStage.DEFAULT && maximizeButtonRender, stage !== windowStage.DEFAULT && restoreButtonRender, closeButtonRender));\n};\n/**\n * @hidden\n */\nexport var WindowTitleBar = React.forwardRef(function (props, ref) {\n  return React.createElement(WindowTitleBarComponent, __assign({}, props, {\n    forwardedRef: ref\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}