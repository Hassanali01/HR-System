{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { FormContext } from './FormContext';\n/**\n * Represents the FieldArray component that is used inside the KendoReact Form component.\n * It provides methods via render props for common array manipulations.\n */\nexport var FieldArray = function FieldArray(props) {\n  var name = props.name,\n    component = props.component,\n    validator = props.validator,\n    type = props.type,\n    children = props.children,\n    others = __rest(props, [\"name\", \"component\", \"validator\", \"type\", \"children\"]);\n  var form = React.useContext(FormContext);\n  var formId = form ? form.id : '';\n  React.useEffect(function () {\n    if (!form) {\n      return;\n    }\n    var unregisterField = form.registerField(name, validator);\n    return unregisterField;\n  }, [name, formId, validator]);\n  var onUnshift = React.useCallback(function (event) {\n    return form.onUnshift(name, event);\n  }, [name, formId]);\n  var onPush = React.useCallback(function (event) {\n    return form.onPush(name, event);\n  }, [name, formId]);\n  var onInsert = React.useCallback(function (event) {\n    return form.onInsert(name, event);\n  }, [name, formId]);\n  var onPop = React.useCallback(function () {\n    return form.onPop(name);\n  }, [name, formId]);\n  var onRemove = React.useCallback(function (event) {\n    return form.onRemove(name, event);\n  }, [name, formId]);\n  var onReplace = React.useCallback(function (event) {\n    return form.onReplace(name, event);\n  }, [name, formId]);\n  var onMove = React.useCallback(function (event) {\n    return form.onMove(name, event);\n  }, [name, formId]);\n  if (!form) {\n    // TODO: For future versions - warn for missing form in dev mode\n    // if (__process.env.NODE_ENV !== 'production') { // or __DEV__\n    //     throw new Error('Field must be used inside of a <Form> component');\n    // }\n    return null;\n  }\n  // TODO: remove this and pass down  getter to allow users optimize when to refresh the data?\n  var value = form.valueGetter(name);\n  // TODO: For future versions as it's better to have render prop\n  // if (typeof children === 'function') {\n  //     return children({ ...field, children: undefined, ...others });\n  // }\n  return React.createElement(component, __assign({\n    // input\n    value: value,\n    // meta\n    validationMessage: form.errors[name],\n    touched: form.touched[name],\n    modified: form.modified[name],\n    visited: form.visited[name],\n    // Our `valid` implementation requires double submit to show html5 validation errors,\n    // however it's NOT recommended to show html5 validation errors at all as:\n    // - There is no standard way to change validation look and feel with CSS.\n    // - Look different in each browser / OS\n    // - You can have a page in one language but an error message displayed in another language (not localizable)\n    valid: !(Boolean(form.errors[name]) && form.touched[name]),\n    onUnshift: onUnshift,\n    onPush: onPush,\n    onInsert: onInsert,\n    onPop: onPop,\n    onRemove: onRemove,\n    onReplace: onReplace,\n    onMove: onMove,\n    children: children,\n    name: name\n  }, others));\n};\nFieldArray.displayName = 'KendoReactFieldArray';","map":null,"metadata":{},"sourceType":"module"}