{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { SignaturePad } from '@progress/kendo-inputs-common';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { classNames, createPropsContext, dispatchEvent, getTabIndex, kendoThemeMaps, Keys, noop, usePropsContext } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { Dialog } from '@progress/kendo-react-dialogs';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { messages, signatureClear, signatureMaximize, signatureMinimize } from '../messages';\nimport { packageMetadata } from '../package-metadata';\nimport { hasParent } from './utils';\nvar DEFAULT_WIDTH = 250;\nvar DEFAULT_HEIGHT = 84;\nvar DEFAULT_POPUP_SCALE = 3;\nvar DEFAULT_EXPORT_SCALE = 2;\nvar DEFAULT_COLOR = '#000000';\nvar DEFAULT_BACKGROUND_COLOR = '#ffffff';\n/**\n * @hidden\n */\nvar isControlled = function isControlled(prop) {\n  return prop !== undefined;\n};\n/**\n * Represents the PropsContext of the `Signature` component.\n * Used for global configuration of all `Signature` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var SignaturePropsContext = createPropsContext();\n/**\n * Represents the [KendoReact Signature component]({% slug overview_signature %}).\n */\nexport var Signature = React.forwardRef(function (directProps, target) {\n  var _a;\n  validatePackage(packageMetadata);\n  var props = usePropsContext(SignaturePropsContext, directProps);\n  var localizationService = useLocalization();\n  var elementRef = React.useRef(null);\n  var canvasRef = React.useRef(null);\n  var dialogRef = React.useRef(null);\n  var minimizeButtonRef = React.useRef(null);\n  var maximizeButtonRef = React.useRef(null);\n  var _b = React.useState(),\n    instance = _b[0],\n    setInstance = _b[1];\n  var _c = React.useState(false),\n    focused = _c[0],\n    setFocused = _c[1];\n  var _d = React.useState(false),\n    isDrawing = _d[0],\n    setIsDrawing = _d[1];\n  var _e = React.useState(),\n    stateValue = _e[0],\n    setStateValue = _e[1];\n  var _f = React.useState(),\n    popupValue = _f[0],\n    setPopupValue = _f[1];\n  var isValueControlled = isControlled(props.value);\n  var value = isValueControlled ? props.value : stateValue;\n  var _g = React.useState(false),\n    stateOpen = _g[0],\n    setStateOpen = _g[1];\n  var isOpenControlled = isControlled(props.open);\n  var open = isOpenControlled ? props.open : stateOpen;\n  var showMaximize = !(props.maximized || isDrawing || !props.maximizable || props.disabled);\n  var showMinimize = props.maximized && !isDrawing;\n  var isEmpty = !(props.value || stateValue);\n  var showClear = !(isEmpty || isDrawing || props.readOnly || props.disabled);\n  var maximizeTitle = localizationService.toLanguageString(signatureMaximize, messages[signatureMaximize]);\n  var minimizeTitle = localizationService.toLanguageString(signatureMinimize, messages[signatureMinimize]);\n  var clearTitle = localizationService.toLanguageString(signatureClear, messages[signatureClear]);\n  var popupScale = props.popupScale || DEFAULT_POPUP_SCALE;\n  var exportScale = props.exportScale || DEFAULT_EXPORT_SCALE;\n  var onValueChange = function onValueChange(nextValue) {\n    setStateValue(nextValue);\n    if (props.onChange) {\n      props.onChange({\n        value: nextValue\n      });\n    }\n  };\n  var onDialogChange = function onDialogChange(e) {\n    instance === null || instance === void 0 ? void 0 : instance.loadImage(e.value);\n    onValueChange(e.value);\n  };\n  React.useEffect(function () {\n    if (props.value !== stateValue) {\n      setStateValue(props.value);\n      instance === null || instance === void 0 ? void 0 : instance.loadImage(props.value);\n    }\n  }, [props.value]);\n  var reset = function reset() {\n    instance === null || instance === void 0 ? void 0 : instance.clear();\n    onValueChange();\n  };\n  var setOpen = React.useCallback(function (nextOpen) {\n    if (!isOpenControlled) {\n      setStateOpen(nextOpen);\n    }\n  }, [isOpenControlled]);\n  var onDialogClose = function onDialogClose(event) {\n    var _a, _b;\n    onMinimizeClick(event);\n    (_b = ((_a = maximizeButtonRef.current) === null || _a === void 0 ? void 0 : _a.element) || canvasRef.current) === null || _b === void 0 ? void 0 : _b.focus();\n  };\n  var colorGetter = React.useCallback(function () {\n    var defaultColor = DEFAULT_COLOR;\n    if (!props.color && typeof document !== 'undefined' && elementRef.current) {\n      defaultColor = getComputedStyle(elementRef.current).color;\n    }\n    return props.color || defaultColor;\n  }, [props.color]);\n  var backgroundColorGetter = React.useCallback(function () {\n    var defaultBackgroundColor = DEFAULT_BACKGROUND_COLOR;\n    if (!props.backgroundColor && typeof document !== 'undefined' && elementRef.current) {\n      defaultBackgroundColor = getComputedStyle(elementRef.current).backgroundColor;\n    }\n    return props.backgroundColor || defaultBackgroundColor;\n  }, [props.backgroundColor]);\n  var getOptions = function getOptions() {\n    return {\n      scale: props.maximized ? props.popupScale : 1,\n      color: colorGetter(),\n      backgroundColor: backgroundColorGetter(),\n      strokeWidth: props.strokeWidth,\n      smooth: props.smooth,\n      readonly: props.readOnly\n    };\n  };\n  var exportImage = function exportImage(exportSize) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var width, height;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            width = exportSize.width, height = exportSize.height;\n            return [4 /*yield*/, instance === null || instance === void 0 ? void 0 : instance.exportImage({\n              width: width * exportScale,\n              height: height * exportScale\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  React.useEffect(function () {\n    var canvas = canvasRef.current;\n    var pad = new SignaturePad(canvas, getOptions());\n    if (value) {\n      pad.loadImage(value);\n    }\n    setInstance(pad);\n    return function () {\n      return pad.destroy();\n    };\n  }, []);\n  React.useEffect(function () {\n    instance === null || instance === void 0 ? void 0 : instance.setOptions({\n      onChange: function onChange() {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var _a;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _a = onValueChange;\n                return [4 /*yield*/, exportImage(elementSize())];\n              case 1:\n                return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n            }\n          });\n        });\n      },\n      onDraw: function onDraw() {\n        return setIsDrawing(true);\n      },\n      onDrawEnd: function onDrawEnd() {\n        return setIsDrawing(false);\n      }\n    });\n  }, [instance]);\n  React.useLayoutEffect(function () {\n    return instance === null || instance === void 0 ? void 0 : instance.setOptions(getOptions());\n  }, [props.readOnly, props.color, props.backgroundColor, props.strokeWidth, props.smooth]);\n  React.useEffect(function () {\n    var _a, _b;\n    var overlay = (_b = (_a = dialogRef.current) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.querySelector('.k-overlay');\n    if (!overlay) {\n      return;\n    }\n    var onOverlayClick = function onOverlayClick() {\n      return setOpen(false);\n    };\n    overlay.addEventListener('click', onOverlayClick);\n    return function () {\n      return overlay.removeEventListener('click', onOverlayClick);\n    };\n  }, [open]);\n  React.useEffect(function () {\n    if (!open || typeof document === 'undefined') {\n      return;\n    }\n    var onDocumentKeydown = function onDocumentKeydown(e) {\n      if (e.keyCode === Keys.esc) {\n        setOpen(false);\n      }\n    };\n    document.addEventListener('keydown', onDocumentKeydown);\n    return function () {\n      return document.removeEventListener('keydown', onDocumentKeydown);\n    };\n  }, [open]);\n  React.useEffect(function () {\n    var _a, _b;\n    if (!props.maximized) {\n      return;\n    }\n    (_b = (_a = minimizeButtonRef.current) === null || _a === void 0 ? void 0 : _a.element) === null || _b === void 0 ? void 0 : _b.focus();\n  }, []);\n  var focusElement = React.useCallback(function () {\n    var _a;\n    return (_a = canvasRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, []);\n  var valueGetter = React.useCallback(function () {\n    return props.value;\n  }, [props.value]);\n  var nameGetter = React.useCallback(function () {\n    return props.name;\n  }, [props.name]);\n  var requiredGetter = React.useCallback(function () {\n    return props.required;\n  }, [props.required]);\n  var validityGetter = React.useCallback(function () {\n    var customError = props.validationMessage !== undefined;\n    var currentValue = valueGetter();\n    var valueMissing = !currentValue;\n    var valid = props.valid !== undefined ? props.valid : !requiredGetter() || !valueMissing;\n    return {\n      customError: customError,\n      valid: valid,\n      valueMissing: valueMissing\n    };\n  }, [props.validationMessage, props.valid, valueGetter, requiredGetter]);\n  var validityStylesGetter = React.useCallback(function () {\n    return props.validityStyles;\n  }, [props.validityStyles]);\n  var propsGetter = React.useCallback(function () {\n    return props;\n  }, [props]);\n  var getImperativeHandle = React.useCallback(function () {\n    var options = {\n      element: elementRef.current,\n      focus: focusElement\n    };\n    Object.defineProperty(options, 'name', {\n      get: nameGetter\n    });\n    Object.defineProperty(options, 'value', {\n      get: valueGetter\n    });\n    Object.defineProperty(options, 'validity', {\n      get: validityGetter\n    });\n    Object.defineProperty(options, 'validityStyles', {\n      get: validityStylesGetter\n    });\n    Object.defineProperty(options, 'required', {\n      get: requiredGetter\n    });\n    Object.defineProperty(options, 'props', {\n      get: propsGetter\n    });\n    Object.defineProperty(options, 'color', {\n      get: colorGetter\n    });\n    Object.defineProperty(options, 'backgroundColor', {\n      get: backgroundColorGetter\n    });\n    return options;\n  }, [nameGetter, valueGetter, validityGetter, validityStylesGetter, requiredGetter, focusElement, propsGetter, colorGetter, backgroundColorGetter]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var onFocus = React.useCallback(function (event) {\n    if (focused || props.maximized) {\n      return;\n    }\n    setFocused(true);\n    dispatchEvent(props.onFocus, event, getImperativeHandle(), {});\n  }, [focused, props.onFocus, getImperativeHandle]);\n  var onBlur = React.useCallback(function (event) {\n    var insideWrapper = hasParent(event.relatedTarget, elementRef.current);\n    if (insideWrapper) {\n      return;\n    }\n    setFocused(false);\n    dispatchEvent(props.onBlur, event, getImperativeHandle(), {});\n  }, [focused, props.onBlur, getImperativeHandle]);\n  var onMaximizeClick = React.useCallback(function (event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = setPopupValue;\n            return [4 /*yield*/, exportImage(popupSize())];\n          case 1:\n            _a.apply(void 0, [_b.sent()]);\n            setOpen(true);\n            dispatchEvent(props.onOpen, event, getImperativeHandle(), {});\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [open, isOpenControlled, props.onOpen, props.value, stateValue, getImperativeHandle]);\n  var onMinimizeClick = React.useCallback(function (event) {\n    setOpen(false);\n    dispatchEvent(props.onClose, event, getImperativeHandle(), {});\n  }, [open, isOpenControlled, props.onClose, getImperativeHandle]);\n  var onClear = function onClear() {\n    reset();\n    focusElement();\n  };\n  var elementSize = function elementSize() {\n    var _a, _b;\n    var width = props.width || ((_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth) || DEFAULT_WIDTH;\n    var height = props.height || ((_b = elementRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || DEFAULT_HEIGHT;\n    return {\n      width: width,\n      height: height\n    };\n  };\n  var popupSize = function popupSize() {\n    var _a = elementSize(),\n      width = _a.width,\n      height = _a.height;\n    return {\n      width: width * popupScale,\n      height: height * popupScale\n    };\n  };\n  var isValid = !validityStylesGetter() || validityGetter().valid;\n  return React.createElement(\"div\", {\n    ref: elementRef,\n    dir: props.dir,\n    style: __assign({\n      width: props.width,\n      height: props.height\n    }, props.style),\n    className: classNames('k-input', 'k-signature', (_a = {\n      'k-signature-maximized': props.maximized\n    }, _a[\"k-signature-\".concat(kendoThemeMaps.sizeMap[props.size] || props.size)] = props.size, _a[\"k-input-\".concat(props.fillMode)] = props.fillMode, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[props.rounded] || props.rounded)] = props.rounded, _a['k-invalid'] = !isValid, _a['k-required'] = props.required, _a['k-disabled'] = props.disabled, _a['k-focus'] = focused, _a), props.className),\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, React.createElement(\"div\", {\n    className: 'k-signature-canvas',\n    ref: canvasRef,\n    tabIndex: getTabIndex(props.tabIndex, props.disabled),\n    role: \"img\",\n    id: props.id,\n    \"aria-label\": props.ariaLabel,\n    \"aria-labelledby\": props.ariaLabelledBy,\n    \"aria-describedby\": props.ariaDescribedBy,\n    \"aria-disabled\": props.disabled ? 'true' : undefined\n  }), React.createElement(\"div\", {\n    className: 'k-signature-actions k-signature-actions-top'\n  }, showMaximize && React.createElement(Button, {\n    className: 'k-signature-action k-signature-maximize',\n    ref: maximizeButtonRef,\n    icon: 'hyperlink-open',\n    shape: null,\n    fillMode: 'flat',\n    size: props.size,\n    onClick: onMaximizeClick,\n    \"aria-label\": maximizeTitle,\n    title: maximizeTitle\n  }), showMinimize && React.createElement(Button, {\n    className: 'k-signature-action k-signature-minimize k-rotate-180',\n    ref: minimizeButtonRef,\n    icon: 'hyperlink-open',\n    shape: null,\n    fillMode: 'flat',\n    size: props.size,\n    onClick: onMinimizeClick,\n    \"aria-label\": minimizeTitle,\n    title: minimizeTitle\n  })), !props.hideLine && React.createElement(\"div\", {\n    className: 'k-signature-line',\n    style: {\n      zIndex: 2,\n      pointerEvents: 'none'\n    }\n  }), React.createElement(\"div\", {\n    className: 'k-signature-actions k-signature-actions-bottom'\n  }, showClear && React.createElement(Button, {\n    className: 'k-signature-action k-signature-clear',\n    icon: 'close',\n    shape: null,\n    fillMode: 'flat',\n    size: props.size,\n    onClick: onClear,\n    \"aria-label\": clearTitle,\n    title: clearTitle\n  })), open && React.createElement(Dialog, {\n    ref: dialogRef\n  }, React.createElement(Signature, __assign({}, props, popupSize(), {\n    value: popupValue,\n    maximized: true,\n    exportScale: 1 / popupScale * exportScale,\n    open: false,\n    onChange: onDialogChange,\n    onClose: onDialogClose\n  }))));\n});\nSignature.propTypes = {\n  value: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  tabIndex: PropTypes.number,\n  dir: PropTypes.string,\n  ariaDescribedBy: PropTypes.string,\n  ariaLabelledBy: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n  validationMessage: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  rounded: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])\n};\nSignature.displayName = 'KendoSignature';\nSignature.defaultProps = {\n  strokeWidth: 1,\n  smooth: false,\n  popupScale: DEFAULT_POPUP_SCALE,\n  exportScale: DEFAULT_EXPORT_SCALE,\n  maximizable: true,\n  disabled: false,\n  required: false,\n  validityStyles: true,\n  onChange: function onChange(_) {\n    return noop;\n  },\n  onFocus: function onFocus(_) {\n    return noop;\n  },\n  onBlur: function onBlur(_) {\n    return noop;\n  },\n  onOpen: function onOpen(_) {\n    return noop;\n  },\n  onClose: function onClose(_) {\n    return noop;\n  },\n  size: 'medium',\n  rounded: 'medium',\n  fillMode: 'solid'\n};","map":null,"metadata":{},"sourceType":"module"}