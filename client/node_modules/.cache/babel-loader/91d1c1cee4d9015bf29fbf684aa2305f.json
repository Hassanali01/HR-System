{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { DialogTitleBar } from './DialogTitleBar';\nimport { DialogActionsBar } from './DialogActionsBar';\nimport { guid, dispatchEvent, Keys, canUseDOM, ZIndexContext, createPropsContext, withPropsContext } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from './package-metadata';\nimport { getMaxZIndex } from './utils';\nimport { DATA_DIALOGS_ID, DEFAULT_DIALOGS_ZINDEX, ZINDEX_DIALOGS_STEP } from './constants';\n// tslint:enable:max-line-length\n/** @hidden */\nvar DialogWithoutContext = /** @class */function (_super) {\n  __extends(DialogWithoutContext, _super);\n  function DialogWithoutContext(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n    _this.context = 0;\n    _this._id = guid();\n    _this.titleId = _this.generateTitleId();\n    _this.contentId = _this.generateContentId();\n    /**\n     * @hidden\n     */\n    _this.onCloseDialog = function (event) {\n      event.preventDefault();\n      dispatchEvent(_this.props.onClose, event, _this, undefined);\n    };\n    /**\n     * @hidden\n     */\n    _this.onKeyDown = function (event) {\n      if (event.keyCode === Keys.esc && _this.props.onClose) {\n        event.preventDefault();\n        _this.onCloseDialog(event);\n      }\n      var kDialog = _this.element;\n      if (kDialog && event.keyCode === Keys.tab) {\n        var focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n        var focusableContent = kDialog.querySelectorAll(focusableElements);\n        var firstFocusableElement = focusableContent[0];\n        var lastFocusableElement = focusableContent[focusableContent.length - 1];\n        var currentDocument = _this.getDocument();\n        if (event.shiftKey) {\n          if (currentDocument && currentDocument.activeElement === firstFocusableElement || currentDocument && currentDocument.activeElement === _this.element) {\n            lastFocusableElement.focus();\n            event.preventDefault();\n          }\n        } else {\n          if (currentDocument && currentDocument.activeElement === lastFocusableElement) {\n            firstFocusableElement.focus();\n            event.preventDefault();\n          }\n        }\n      }\n    };\n    _this.getCurrentZIndex = function () {\n      if (!_this.state || _this.context === undefined) {\n        return _this.context ? _this.context : DEFAULT_DIALOGS_ZINDEX;\n      }\n      return _this.state.zIndex > (_this.context ? _this.context + ZINDEX_DIALOGS_STEP : 0) ? _this.state.zIndex : _this.context + ZINDEX_DIALOGS_STEP;\n    };\n    _this.getDocument = function () {\n      return _this.props.appendTo ? _this.props.appendTo.ownerDocument : document;\n    };\n    validatePackage(packageMetadata);\n    _this.state = {\n      zIndex: getMaxZIndex(_this.getCurrentZIndex(), _this.getDocument(), _this._id)\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n  DialogWithoutContext.prototype.componentDidMount = function () {\n    if (this.element) {\n      if (this.props.autoFocus) {\n        this.element.focus();\n      }\n    }\n  };\n  /**\n   * @hidden\n   */\n  DialogWithoutContext.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var id = this.props.id !== undefined ? this.props.id : this.titleId;\n    var _b = this.props,\n      title = _b.title,\n      width = _b.width,\n      height = _b.height,\n      children = _b.children,\n      minWidth = _b.minWidth,\n      dir = _b.dir,\n      style = _b.style,\n      contentStyle = _b.contentStyle;\n    var elementsArray = React.Children.toArray(children);\n    var content = this.getContent(elementsArray);\n    var actions = this.getActionBar(elementsArray);\n    var aria = title ? {\n      'aria-labelledby': id\n    } : null;\n    var closeIcon = this.props.closeIcon !== undefined ? this.props.closeIcon : true;\n    var currentZIndex = this.getCurrentZIndex();\n    var dialogElement = React.createElement(ZIndexContext.Provider, {\n      value: currentZIndex\n    }, React.createElement(\"div\", __assign({}, (_a = {}, _a[DATA_DIALOGS_ID] = this._id, _a), {\n      className: 'k-dialog-wrapper' + (this.props.className ? ' ' + this.props.className : ''),\n      onKeyDown: this.onKeyDown,\n      tabIndex: 0,\n      dir: dir,\n      style: __assign({\n        zIndex: currentZIndex\n      }, style),\n      ref: function ref(el) {\n        return _this.element = el;\n      }\n    }), React.createElement(\"div\", {\n      className: \"k-overlay\"\n    }), React.createElement(\"div\", __assign({}, aria, {\n      className: \"k-widget k-window k-dialog\",\n      role: \"dialog\",\n      \"aria-modal\": true,\n      \"aria-describedby\": this.contentId,\n      style: {\n        width: width,\n        height: height,\n        minWidth: minWidth\n      }\n    }), this.props.title && React.createElement(DialogTitleBar, {\n      closeIcon: closeIcon,\n      onCloseButtonClick: this.onCloseDialog,\n      id: id\n    }, title), React.createElement(\"div\", {\n      className: \"k-window-content k-dialog-content\",\n      style: contentStyle,\n      id: this.contentId\n    }, content), actions)));\n    if (canUseDOM) {\n      return this.props.appendTo !== null ? ReactDOM.createPortal(dialogElement, this.props.appendTo || document.body) : dialogElement;\n    }\n    return null;\n  };\n  DialogWithoutContext.prototype.getActionBar = function (children) {\n    return children.filter(function (child) {\n      return child && child.type === DialogActionsBar;\n    });\n  };\n  DialogWithoutContext.prototype.getContent = function (children) {\n    return children.filter(function (child) {\n      return child && child.type !== DialogActionsBar;\n    });\n  };\n  DialogWithoutContext.prototype.generateTitleId = function () {\n    return 'dialog-title' + this._id;\n  };\n  DialogWithoutContext.prototype.generateContentId = function () {\n    return 'dialog-content' + this._id;\n  };\n  DialogWithoutContext.displayName = 'Dialog';\n  /**\n   * @hidden\n   */\n  DialogWithoutContext.propTypes = {\n    title: PropTypes.any,\n    id: PropTypes.string,\n    dir: PropTypes.string,\n    style: PropTypes.object,\n    closeIcon: PropTypes.bool,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    autoFocus: PropTypes.bool\n  };\n  /**\n   * @hidden\n   */\n  DialogWithoutContext.defaultProps = {\n    autoFocus: false\n  };\n  /**\n   * @hidden\n   */\n  DialogWithoutContext.contextType = ZIndexContext;\n  return DialogWithoutContext;\n}(React.Component);\n/**\n * Represents the PropsContext of the `Dialog` component.\n * Used for global configuration of all `Dialog` instances.\n */\nexport var DialogPropsContext = createPropsContext();\n/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */\n/**\n * Represents the [KendoReact Dialog component]({% slug overview_dialog %}).\n *\n * Accepts properties of type [DialogProps]({% slug api_dialogs_dialogprops %}).\n * Obtaining the `ref` returns an object of type [DialogHandle]({% slug api_dialogs_dialoghandle %}).\n */\nexport var Dialog = withPropsContext(DialogPropsContext, DialogWithoutContext);\nDialog.displayName = 'KendoReactDialog';","map":null,"metadata":{},"sourceType":"module"}