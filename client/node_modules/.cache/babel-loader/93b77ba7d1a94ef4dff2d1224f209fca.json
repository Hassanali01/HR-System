{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { useInternationalization, useLocalization } from '@progress/kendo-react-intl';\nimport { classNames, guid, getTabIndex, dispatchEvent, createPropsContext, usePropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { FloatingLabel } from '@progress/kendo-react-labels';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\nimport { numericIncreaseValue, messages, numericDecreaseValue } from '../messages';\nimport { formatValue, sanitizeNumber, rangeValue, increaseValue, decreaseValue, getStateOrPropsValue, getInitialState } from './utils';\nimport { Button } from '@progress/kendo-react-buttons';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!';\n/**\n * Represents the PropsContext of the `NumericTextBox` component.\n * Used for global configuration of all `NumericTextBox` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var NumericTextBoxPropsContext = createPropsContext();\n/**\n * Represents the [KendoReact NumericTextBox component]({% slug overview_numerictextbox %}).\n */\nexport var NumericTextBox = React.forwardRef(function (directProps, target) {\n  var _a;\n  validatePackage(packageMetadata);\n  var props = usePropsContext(NumericTextBoxPropsContext, directProps);\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var inputId = props.id || calculatedId;\n  var intlService = useInternationalization();\n  var localizationService = useLocalization();\n  var elementRef = React.useRef(null);\n  var valueDuringChangeRef = React.useRef();\n  var _b = React.useState(false),\n    forceUpdate = _b[0],\n    setForceUpdate = _b[1];\n  var stateRef = React.useRef(getInitialState());\n  var isPasteRef = React.useRef(false);\n  var prevLooseValueRef = React.useRef();\n  var stateValueRef = React.useRef(props.defaultValue);\n  var looseValue = formatValue(stateRef.current.focused && !props.disabled ? stateRef.current.currentLooseValue : getStateOrPropsValue(props.value, stateValueRef.current), props.format, intlService);\n  prevLooseValueRef.current = looseValue;\n  React.useEffect(function () {\n    if (elementRef.current && elementRef.current.setCustomValidity) {\n      elementRef.current.setCustomValidity(validityGetter().valid ? '' : props.validationMessage || VALIDATION_MESSAGE);\n    }\n  });\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var valueGetter = React.useCallback(function () {\n    if (valueDuringChangeRef.current !== undefined) {\n      return valueDuringChangeRef.current;\n    } else {\n      return getStateOrPropsValue(props.value, stateValueRef.current);\n    }\n  }, [props.value]);\n  var nameGetter = React.useCallback(function () {\n    return props.name;\n  }, [props.name]);\n  var requiredGetter = React.useCallback(function () {\n    return props.required;\n  }, [props.required]);\n  var validityGetter = React.useCallback(function () {\n    var customError = props.validationMessage !== undefined;\n    var currentValue = valueGetter();\n    var valid = props.valid !== undefined ? props.valid : !stateRef.current.valueIsOutOfRange && (!requiredGetter() || currentValue !== null && currentValue !== undefined);\n    return {\n      customError: customError,\n      valid: valid,\n      valueMissing: currentValue === null || currentValue === undefined\n    };\n  }, [props.validationMessage, props.valid, valueGetter, requiredGetter]);\n  var validityStylesGetter = React.useCallback(function () {\n    return props.validityStyles;\n  }, [props.validityStyles]);\n  var propsGetter = React.useCallback(function () {\n    return props;\n  }, [props]);\n  var getImperativeHandle = React.useCallback(function () {\n    var options = {\n      element: elementRef.current,\n      focus: focusElement\n    };\n    Object.defineProperty(options, 'name', {\n      get: nameGetter\n    });\n    Object.defineProperty(options, 'value', {\n      get: valueGetter\n    });\n    Object.defineProperty(options, 'validity', {\n      get: validityGetter\n    });\n    Object.defineProperty(options, 'validityStyles', {\n      get: validityStylesGetter\n    });\n    Object.defineProperty(options, 'required', {\n      get: requiredGetter\n    });\n    Object.defineProperty(options, 'props', {\n      get: propsGetter\n    });\n    return options;\n  }, [nameGetter, valueGetter, validityGetter, validityStylesGetter, requiredGetter, focusElement, propsGetter]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var getCurrentState = React.useCallback(function () {\n    return {\n      eventValue: getStateOrPropsValue(props.value, stateValueRef.current),\n      prevLooseValue: prevLooseValueRef.current,\n      currentLooseValue: elementRef.current.value,\n      selectionStart: elementRef.current.selectionStart,\n      selectionEnd: elementRef.current.selectionEnd,\n      decimalSelect: false,\n      valueIsCorrected: false,\n      valueIsOutOfRange: false,\n      isPaste: isPasteRef.current,\n      focused: stateRef.current.focused\n    };\n  }, [props.value]);\n  var triggerChange = React.useCallback(function (event, newState) {\n    if (props.disabled) {\n      return;\n    }\n    valueDuringChangeRef.current = newState.eventValue;\n    stateValueRef.current = newState.eventValue;\n    var formattedValue = formatValue(rangeValue(newState.eventValue, props.min, props.max), props.format, intlService);\n    var rangedValue = rangeValue(intlService.parseNumber(formattedValue, props.format), props.min, props.max);\n    if (rangedValue !== newState.eventValue) {\n      newState.valueIsOutOfRange = true;\n      newState.eventValue = rangedValue;\n      stateValueRef.current = rangedValue;\n    }\n    var shouldFireEvent = props.value !== newState.eventValue;\n    if (shouldFireEvent) {\n      dispatchEvent(props.onChange, event, getImperativeHandle(), {\n        value: newState.eventValue\n      });\n    }\n    valueDuringChangeRef.current = undefined;\n    stateRef.current = newState;\n    setForceUpdate(function (_x) {\n      return !_x;\n    });\n  }, [props.value, props.onChange, props.disabled, setForceUpdate, getImperativeHandle]);\n  var onChangeHandler = React.useCallback(function (event) {\n    var stateCandidate = getCurrentState();\n    isPasteRef.current = false;\n    triggerChange(event, sanitizeNumber(stateCandidate, props.format, intlService));\n  }, [props.format, props.onChange, intlService, triggerChange, getCurrentState]);\n  var onKeyDown = React.useCallback(function (event) {\n    var newState = getCurrentState();\n    var currentValue = intlService.parseNumber(String(newState.currentLooseValue), props.format);\n    // Select All\n    if (newState.selectionEnd > newState.selectionStart && newState.selectionEnd - newState.selectionStart === String(newState.currentLooseValue).length) {\n      isPasteRef.current = true;\n      return;\n    }\n    switch (event.keyCode) {\n      case 38:\n        // Arrow up\n        increaseValue(currentValue, newState, props.step, props.min, props.max, props.format, intlService);\n        break;\n      case 40:\n        // Arrow down\n        decreaseValue(currentValue, newState, props.step, props.min, props.max, props.format, intlService);\n        break;\n      case 13:\n        // Enter - range values\n        if (props.rangeOnEnter === false) {\n          return;\n        }\n        var formattedValue = formatValue(rangeValue(currentValue, props.min, props.max), props.format, intlService);\n        var rangedValue = rangeValue(intlService.parseNumber(formattedValue, props.format), props.min, props.max);\n        newState.eventValue = rangedValue;\n        newState.currentLooseValue = formatValue(rangedValue, props.format, intlService);\n        newState.selectionStart = newState.selectionEnd = newState.currentLooseValue.length;\n        break;\n      case 110:\n        // Numpad decimal key\n        var element = elementRef.current;\n        var symbols = intlService.numberSymbols();\n        if (element) {\n          newState.currentLooseValue = newState.currentLooseValue.slice(0, newState.selectionStart) + symbols.decimal + newState.currentLooseValue.slice(newState.selectionEnd);\n          newState.selectionStart = newState.selectionEnd = newState.selectionStart + 1;\n          newState = sanitizeNumber(newState, props.format, intlService);\n        }\n        break;\n      default:\n        return;\n    }\n    event.preventDefault();\n    triggerChange(event, newState);\n  }, [props.format, props.min, props.max, props.step, props.onChange, props.rangeOnEnter, triggerChange, getCurrentState]);\n  var onPasteHandler = React.useCallback(function () {\n    isPasteRef.current = true;\n  }, []);\n  var onIncrease = React.useCallback(function (event) {\n    if (props.readOnly || props.disabled) {\n      return;\n    }\n    var newState = getCurrentState();\n    increaseValue(intlService.parseNumber(String(newState.currentLooseValue), props.format), newState, props.step, props.min, props.max, props.format, intlService);\n    triggerChange(event, newState);\n  }, [props.format, props.min, props.max, props.step, props.onChange, props.readOnly, props.disabled, triggerChange, getCurrentState]);\n  var onDecrease = React.useCallback(function (event) {\n    if (props.readOnly || props.disabled) {\n      return;\n    }\n    var newState = getCurrentState();\n    decreaseValue(intlService.parseNumber(String(newState.currentLooseValue), props.format), newState, props.step, props.min, props.max, props.format, intlService);\n    triggerChange(event, newState);\n  }, [props.format, props.min, props.max, props.step, props.onChange, props.readOnly, props.disabled, triggerChange, getCurrentState]);\n  var onWheelHandler = React.useCallback(function (event) {\n    if (!document || document.activeElement !== elementRef.current || !elementRef.current || props.readOnly || props.disabled) {\n      return;\n    }\n    if (event.nativeEvent.deltaY < 0) {\n      onIncrease(event);\n    }\n    if (event.nativeEvent.deltaY > 0) {\n      onDecrease(event);\n    }\n  }, [onIncrease, onDecrease, props.disabled, props.readOnly]);\n  var onFocus = React.useCallback(function (event) {\n    stateRef.current.currentLooseValue = prevLooseValueRef.current;\n    stateRef.current.focused = true;\n    dispatchEvent(props.onFocus, event, getImperativeHandle(), {});\n    setForceUpdate(function (x) {\n      return !x;\n    });\n  }, [props.onFocus, setForceUpdate, getImperativeHandle]);\n  var onBlur = React.useCallback(function (event) {\n    stateRef.current = getInitialState();\n    dispatchEvent(props.onBlur, event, getImperativeHandle(), {});\n    setForceUpdate(function (x) {\n      return !x;\n    });\n  }, [props.onBlur, setForceUpdate, getImperativeHandle]);\n  var onMouseDown = React.useCallback(function (e) {\n    if (document && elementRef.current) {\n      e.preventDefault();\n      if (document.activeElement !== elementRef.current) {\n        elementRef.current.focus();\n      }\n    }\n  }, []);\n  React.useLayoutEffect(function () {\n    // The input element's type ('number') does not support selection.\n    if (elementRef.current && elementRef.current.type !== 'number' && stateRef.current.selectionStart !== undefined && stateRef.current.selectionEnd !== undefined) {\n      elementRef.current.selectionStart = stateRef.current.selectionStart;\n      elementRef.current.selectionEnd = stateRef.current.selectionEnd;\n      stateRef.current.selectionStart = undefined;\n      stateRef.current.selectionEnd = undefined;\n    }\n  }, [forceUpdate]);\n  var isValid = !validityStylesGetter() || validityGetter().valid;\n  var numerictextbox = React.createElement(\"span\", {\n    dir: props.dir,\n    style: !props.label ? __assign({\n      width: props.width\n    }, props.style) : props.style,\n    className: classNames('k-input', 'k-numerictextbox', (_a = {}, _a[\"k-input-\".concat(kendoThemeMaps.sizeMap[props.size] || props.size)] = props.size, _a[\"k-input-\".concat(props.fillMode)] = props.fillMode, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[props.rounded] || props.rounded)] = props.rounded, _a['k-invalid'] = !isValid, _a['k-required'] = props.required, _a['k-disabled'] = props.disabled, _a), props.className),\n    \"aria-disabled\": props.disabled ? 'true' : undefined\n  }, React.createElement(\"input\", {\n    value: looseValue === null ? '' : looseValue,\n    tabIndex: getTabIndex(props.tabIndex, props.disabled),\n    accessKey: props.accessKey,\n    disabled: props.disabled,\n    title: props.title,\n    \"aria-valuemin\": props.min,\n    \"aria-valuemax\": props.max,\n    \"aria-label\": props.ariaLabel,\n    \"aria-labelledby\": props.ariaLabelledBy,\n    \"aria-describedby\": props.ariaDescribedBy,\n    placeholder: props.placeholder,\n    spellCheck: false,\n    autoComplete: 'off',\n    autoCorrect: 'off',\n    type: props.inputType || 'tel',\n    className: 'k-input-inner',\n    id: inputId,\n    name: props.name,\n    readOnly: props.readOnly,\n    style: props.inputStyle,\n    onChange: onChangeHandler,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    onPaste: onPasteHandler,\n    onWheel: onWheelHandler,\n    ref: elementRef\n  }), props.children, props.spinners && React.createElement(\"span\", {\n    className: \"k-input-spinner k-spin-button\",\n    onMouseDown: onMouseDown\n  }, React.createElement(Button, {\n    tabIndex: -1,\n    type: \"button\",\n    icon: 'caret-alt-up',\n    rounded: null,\n    className: \"k-spinner-increase\",\n    \"aria-label\": localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue]),\n    title: localizationService.toLanguageString(numericIncreaseValue, messages[numericIncreaseValue]),\n    onClick: onIncrease\n  }), React.createElement(Button, {\n    tabIndex: -1,\n    type: \"button\",\n    icon: 'caret-alt-down',\n    rounded: null,\n    className: \"k-spinner-decrease\",\n    \"aria-label\": localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue]),\n    title: localizationService.toLanguageString(numericDecreaseValue, messages[numericDecreaseValue]),\n    onClick: onDecrease\n  })));\n  return props.label ? React.createElement(FloatingLabel, {\n    label: props.label,\n    editorId: inputId,\n    editorValue: looseValue === null ? '' : looseValue,\n    editorValid: isValid,\n    editorDisabled: props.disabled,\n    editorPlaceholder: props.placeholder,\n    children: numerictextbox,\n    style: {\n      width: props.width\n    },\n    dir: props.dir\n  }) : numerictextbox;\n});\nNumericTextBox.propTypes = {\n  value: PropTypes.number,\n  defaultValue: PropTypes.number,\n  step: PropTypes.number,\n  format: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    style: PropTypes.oneOf(['decimal', 'currency', 'percent', 'scientific', 'accounting']),\n    currency: PropTypes.string,\n    currencyDisplay: PropTypes.oneOf(['symbol', 'code', 'name']),\n    useGrouping: PropTypes.bool,\n    minimumIntegerDigits: PropTypes.number,\n    minimumFractionDigits: PropTypes.number,\n    maximumFractionDigits: PropTypes.number\n  })]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tabIndex: PropTypes.number,\n  accessKey: PropTypes.string,\n  title: PropTypes.string,\n  placeholder: PropTypes.string,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  spinners: PropTypes.bool,\n  disabled: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  dir: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  validationMessage: PropTypes.string,\n  required: PropTypes.bool,\n  id: PropTypes.string,\n  rangeOnEnter: PropTypes.bool,\n  ariaLabelledBy: PropTypes.string,\n  ariaDescribedBy: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n  fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])\n};\nNumericTextBox.displayName = 'KendoNumericTextBox';\nNumericTextBox.defaultProps = {\n  step: 1,\n  spinners: true,\n  disabled: false,\n  required: false,\n  validityStyles: true,\n  rangeOnEnter: true,\n  onChange: function onChange(_) {\n    return;\n  },\n  onFocus: function onFocus(_) {\n    return;\n  },\n  onBlur: function onBlur(_) {\n    return;\n  },\n  size: 'medium',\n  rounded: 'medium',\n  fillMode: 'solid'\n};","map":null,"metadata":{},"sourceType":"module"}