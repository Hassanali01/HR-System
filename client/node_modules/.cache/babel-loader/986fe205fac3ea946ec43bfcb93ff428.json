{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { MaskingService } from './masking.service';\nimport { defaultRules, maskingChanged, returnFalse } from './utils';\nimport { guid, classNames, getTabIndex, withPropsContext, createPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { FloatingLabel } from '@progress/kendo-react-labels';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/** @hidden */\nvar MaskedTextBoxWithoutContext = /** @class */function (_super) {\n  __extends(MaskedTextBoxWithoutContext, _super);\n  function MaskedTextBoxWithoutContext(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n    _this.state = {};\n    _this._inputId = \"k-\".concat(guid());\n    _this._service = new MaskingService();\n    _this._isPasted = false;\n    _this._selection = [null, null];\n    _this._input = null;\n    /**\n     * @hidden\n     */\n    _this.focus = function () {\n      if (_this._input) {\n        _this._input.focus();\n      }\n    };\n    _this.pasteHandler = function (event) {\n      var _a = event.target,\n        selectionStart = _a.selectionStart,\n        selectionEnd = _a.selectionEnd;\n      if (selectionEnd === selectionStart) {\n        return;\n      }\n      _this._isPasted = true;\n      _this._selection = [selectionStart || 0, selectionEnd || 0];\n    };\n    _this.onChangeHandler = function (event) {\n      var input = event.currentTarget;\n      var value = input.value;\n      var start = _this._selection[0] || 0;\n      var end = _this._selection[1] || 0;\n      if (!_this.props.mask) {\n        _this._isPasted = false;\n        _this._selection = [null, null];\n        _this.triggerOnChange(value, event);\n        return;\n      }\n      var maskedValue = _this.value;\n      var result;\n      if (_this._isPasted) {\n        _this._isPasted = false;\n        var rightPart = maskedValue.length - end;\n        var to = value.length - rightPart;\n        result = _this._service.maskInRange(value.slice(start, to), maskedValue, start, end);\n      } else {\n        result = _this._service.maskInput(value, maskedValue, input.selectionStart || 0);\n      }\n      _this._selection = [result.selection, result.selection];\n      _this.triggerOnChange(result.value, event);\n    };\n    _this.focusHandler = function (event) {\n      if (!_this.state.focused) {\n        _this.setState({\n          focused: true\n        });\n        if (_this.props.onFocus) {\n          _this.props.onFocus.call(undefined, {\n            target: _this,\n            syntheticEvent: event,\n            nativeEvent: event.nativeEvent\n          });\n        }\n      }\n    };\n    _this.blurHandler = function (event) {\n      if (_this.state.focused) {\n        _this.setState({\n          focused: false\n        });\n        if (_this.props.onBlur) {\n          _this.props.onBlur.call(undefined, {\n            target: _this,\n            syntheticEvent: event,\n            nativeEvent: event.nativeEvent\n          });\n        }\n      }\n    };\n    _this.setValidity = function () {\n      if (_this.element) {\n        _this.element.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || '');\n      }\n    };\n    validatePackage(packageMetadata);\n    return _this;\n  }\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"element\", {\n    /**\n     * Gets the element of the MaskedTextBox.\n     *\n     * @return - An `HTMLInputElement`.\n     *\n     * @example\n     * ```jsx\n     * class App extends React.Component {\n     *     constructor(props) {\n     *         super(props);\n     *     }\n     *     element = null;\n     *     render() {\n     *         return (\n     *             <div>\n     *                 <MaskedTextBox\n     *                     ref={(component) =>\n     *                         this.element = component ? component.element : null}\n     *                 />\n     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>\n     *             </div>\n     *         );\n     *     }\n     * }\n     *\n     * ReactDOM.render(\n     *     <App />,\n     *     document.getElementsByTagName('my-app')[0]\n     * );\n     * ```\n     */\n    get: function get() {\n      return this._input;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"value\", {\n    /**\n     * Gets the value with the mask of the MaskedTextBox.\n     */\n    get: function get() {\n      if (this._valueDuringOnChange !== undefined) {\n        return this._valueDuringOnChange;\n      } else if (this.props.value !== undefined) {\n        return this.props.value;\n      } else if (this.state.value !== undefined) {\n        return this.state.value;\n      } else if (this.props.defaultValue !== undefined) {\n        return this.props.defaultValue;\n      }\n      return '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"rawValue\", {\n    /**\n     * Gets the raw value without the mask of the MaskedTextBox.\n     */\n    get: function get() {\n      return this._service.rawValue(this.value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the MaskedTextBox is set.\n     */\n    get: function get() {\n      var maskedValue = this.value;\n      var value = this._service.validationValue(maskedValue);\n      var customError = this.props.validationMessage !== undefined;\n      var valid = this.props.valid !== undefined ? this.props.valid : (!this.required || !!value) && (!this.props.maskValidation || !this.props.prompt || maskedValue.indexOf(this.props.prompt) === -1);\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: !value\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : MaskedTextBoxWithoutContext.defaultProps.validityStyles;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : MaskedTextBoxWithoutContext.defaultProps.required;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the MaskedTextBox.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  MaskedTextBoxWithoutContext.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this.element && this.state.focused && prevState.focused) {\n      var _a = this._selection,\n        start = _a[0],\n        end = _a[1];\n      var prevSelection = prevProps.selection;\n      var nextSelection = this.props.selection;\n      if (!prevSelection && nextSelection || prevSelection && nextSelection && (prevSelection.start !== nextSelection.start || prevSelection.end !== nextSelection.end)) {\n        start = nextSelection.start;\n        end = nextSelection.end;\n      }\n      if (start !== null && end !== null) {\n        this.element.setSelectionRange(start, end);\n      }\n    }\n    if (maskingChanged(prevProps, this.props)) {\n      this.updateService();\n    }\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n  MaskedTextBoxWithoutContext.prototype.componentDidMount = function () {\n    this.updateService();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n  MaskedTextBoxWithoutContext.prototype.render = function () {\n    var _a;\n    var _this = this;\n    var _b = this.props,\n      _c = _b.size,\n      size = _c === void 0 ? MaskedTextBoxWithoutContext.defaultProps.size : _c,\n      _d = _b.fillMode,\n      fillMode = _d === void 0 ? MaskedTextBoxWithoutContext.defaultProps.fillMode : _d,\n      _e = _b.rounded,\n      rounded = _e === void 0 ? MaskedTextBoxWithoutContext.defaultProps.rounded : _e;\n    var inputId = this.props.id || this._inputId;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var style = this.props.style || {};\n    var component = React.createElement(\"span\", {\n      dir: this.props.dir,\n      className: classNames('k-maskedtextbox k-input', (_a = {}, _a[\"k-input-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-input-\".concat(fillMode)] = fillMode, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a['k-invalid'] = !isValid, _a['k-required'] = this.required, _a['k-disabled'] = this.props.disabled, _a), this.props.className),\n      style: !this.props.label ? __assign({\n        width: this.props.width\n      }, style) : style\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      autoCapitalize: \"off\",\n      spellCheck: false,\n      className: \"k-input-inner\",\n      value: this.value,\n      id: inputId,\n      \"aria-labelledby\": this.props.ariaLabelledBy,\n      \"aria-describedby\": this.props.ariaDescribedBy,\n      name: this.props.name,\n      tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled, true),\n      accessKey: this.props.accessKey,\n      title: this.props.title,\n      disabled: this.props.disabled || undefined,\n      readOnly: this.props.readonly || undefined,\n      placeholder: this.props.placeholder,\n      ref: function ref(input) {\n        return _this._input = input;\n      },\n      onChange: this.onChangeHandler,\n      onPaste: this.pasteHandler,\n      onFocus: this.focusHandler,\n      onBlur: this.blurHandler,\n      onDragStart: returnFalse,\n      onDrop: returnFalse\n    }));\n    return this.props.label ? React.createElement(FloatingLabel, {\n      label: this.props.label,\n      editorId: inputId,\n      editorValue: this.value,\n      editorValid: isValid,\n      editorDisabled: this.props.disabled,\n      editorPlaceholder: this.props.placeholder,\n      children: component,\n      style: {\n        width: this.props.width\n      },\n      dir: this.props.dir\n    }) : component;\n  };\n  MaskedTextBoxWithoutContext.prototype.triggerOnChange = function (maskedValue, event) {\n    this.setState({\n      value: maskedValue\n    });\n    if (this.props.onChange) {\n      this._valueDuringOnChange = maskedValue;\n      var ev = {\n        syntheticEvent: event,\n        nativeEvent: event.nativeEvent,\n        selectionStart: this._selection[0],\n        selectionEnd: this._selection[1],\n        target: this,\n        value: this.value\n      };\n      this.props.onChange.call(undefined, ev);\n      this._valueDuringOnChange = undefined;\n    }\n  };\n  MaskedTextBoxWithoutContext.prototype.updateService = function (extra) {\n    var config = Object.assign({\n      includeLiterals: this.props.includeLiterals,\n      mask: this.props.mask,\n      prompt: this.props.prompt,\n      promptPlaceholder: this.props.promptPlaceholder,\n      rules: this.rules\n    }, extra); // tslint:disable-line:align\n    this._service.update(config);\n  };\n  Object.defineProperty(MaskedTextBoxWithoutContext.prototype, \"rules\", {\n    get: function get() {\n      return Object.assign({}, defaultRules, this.props.rules);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MaskedTextBoxWithoutContext.displayName = 'MaskedTextBox';\n  /**\n   * @hidden\n   */\n  MaskedTextBoxWithoutContext.propTypes = {\n    value: PropTypes.string,\n    defaultValue: PropTypes.string,\n    placeholder: PropTypes.string,\n    title: PropTypes.string,\n    dir: PropTypes.string,\n    id: PropTypes.string,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    ariaLabelledBy: PropTypes.string,\n    ariaDescribedBy: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    tabIndex: PropTypes.number,\n    accessKey: PropTypes.string,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    prompt: PropTypes.string,\n    promptPlaceholder: PropTypes.string,\n    includeLiterals: PropTypes.bool,\n    maskValidation: PropTypes.bool,\n    mask: PropTypes.string,\n    rules: function rules(props, propName, componentName) {\n      var rules = props.rules;\n      if (rules !== undefined) {\n        var valid = Object.entries(rules).some(function (e) {\n          return typeof e !== 'string' || !(rules[e] instanceof RegExp);\n        });\n        if (!valid) {\n          return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Validation failed.');\n        }\n      }\n      return null;\n    },\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number.isRequired\n    }),\n    name: PropTypes.string,\n    label: PropTypes.string,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    valid: PropTypes.bool,\n    validityStyles: PropTypes.bool,\n    onChange: PropTypes.func,\n    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n    rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n    fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])\n  };\n  /**\n   * @hidden\n   */\n  MaskedTextBoxWithoutContext.defaultProps = {\n    prompt: '_',\n    promptPlaceholder: ' ',\n    includeLiterals: false,\n    maskValidation: true,\n    rules: defaultRules,\n    required: false,\n    validityStyles: true,\n    size: 'medium',\n    rounded: 'medium',\n    fillMode: 'solid'\n  };\n  return MaskedTextBoxWithoutContext;\n}(React.Component);\nexport { MaskedTextBoxWithoutContext };\n/**\n * Represents the PropsContext of the `MaskedTextBox` component.\n * Used for global configuration of all `MaskedTextBox` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var MaskedTextBoxPropsContext = createPropsContext();\n/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */\n/**\n * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).\n *\n * Accepts properties of type [MaskedTextBoxProps]({% slug api_inputs_maskedtextboxprops %}).\n * Obtaining the `ref` returns an object of type [MaskedTextBoxHandle]({% slug api_inputs_maskedtextboxhandle %}).\n */\nexport var MaskedTextBox = withPropsContext(MaskedTextBoxPropsContext, MaskedTextBoxWithoutContext);\nMaskedTextBox.displayName = 'KendoReactMaskedTextBox';","map":null,"metadata":{},"sourceType":"module"}