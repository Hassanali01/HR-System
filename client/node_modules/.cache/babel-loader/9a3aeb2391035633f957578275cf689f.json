{"ast":null,"code":"/**\n * @hidden\n */\nexport var toRound = function toRound(num, base) {\n  if (num % 1) {\n    var percent = Math.pow(10, (base.toString().split('.')[1] || base.toString().split('.')[0]).length);\n    return Math.round(num * percent) / percent;\n  }\n  return num;\n};\n// Opting out of JS `modulo` calculation due to floating-point problems in JS\n// We're looking for the reminder - R.\n// x / y = a + R\n// R = (x / y) - a | *y\n// R = x - (y * a)\n// : a = Math.floor(x /y );\n/**\n * @hidden\n */\nexport var getRemainder = function getRemainder(x, y) {\n  return x - y * Math.floor(x / y);\n};\n/**\n * @hidden\n */\nexport var isHalf = function isHalf(index, value, step) {\n  return toRound(index - step, step) < value && value < index;\n};\n/**\n * @hidden\n */\nexport var isSelected = function isSelected(index, value, step, selection) {\n  if (value === null) {\n    return false;\n  }\n  if (selection === 'continues') {\n    return isHalf(index, value, step) ? toRound(index - step / 2, step / 2) <= value : index <= value;\n  }\n  if (selection === 'single') {\n    return isHalf(index, value, step) ? toRound(index - step / 2, step / 2) === value : index === value;\n  }\n  return false;\n};\n/**\n * @hidden\n */\nexport var calcIsFirstHalf = function calcIsFirstHalf(dir, rect, clientX) {\n  return dir === 'ltr' ? clientX < rect.x + rect.width / 2 : clientX > rect.x + rect.width / 2;\n};\n/**\n * @hidden\n */\nexport var isCorrectValue = function isCorrectValue(min, max, step, value) {\n  for (var i = min; i <= max; i += step) {\n    if (value === i) {\n      return true;\n    }\n  }\n  return false;\n};","map":null,"metadata":{},"sourceType":"module"}