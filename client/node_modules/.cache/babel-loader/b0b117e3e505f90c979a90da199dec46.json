{"ast":null,"code":"import { toRound } from './utils';\n/**\n * @hidden\n */\nexport var RATING_ACTION;\n(function (RATING_ACTION) {\n  RATING_ACTION[\"select\"] = \"select\";\n  RATING_ACTION[\"deselect\"] = \"deselect\";\n  RATING_ACTION[\"increase\"] = \"increase\";\n  RATING_ACTION[\"decrease\"] = \"decrease\";\n  RATING_ACTION[\"min\"] = \"min\";\n  RATING_ACTION[\"max\"] = \"max\";\n  RATING_ACTION[\"reset\"] = \"reset\";\n})(RATING_ACTION || (RATING_ACTION = {}));\n/**\n * @hidden\n */\nexport var ratingReducer = function ratingReducer(state, action) {\n  switch (action.type) {\n    case RATING_ACTION.select:\n      if (action.payload === undefined || action.step === undefined) {\n        return state;\n      }\n      if (action.payload === state) {\n        return null;\n      }\n      return action.payload >= action.min ? action.payload < action.max ? toRound(action.payload, action.step) : action.max : action.min;\n    case RATING_ACTION.deselect:\n      return null;\n    case RATING_ACTION.increase:\n      if (action.step === undefined) {\n        return state;\n      }\n      if (state < action.min) {\n        return action.min;\n      }\n      return state + action.step < action.max ? toRound(state + action.step, action.step) : action.max;\n    case RATING_ACTION.decrease:\n      if (action.step === undefined) {\n        return state;\n      }\n      return toRound(state - action.step, action.step) >= action.min ? toRound(state - action.step, action.step) : action.min;\n    case RATING_ACTION.min:\n      if (action.step === undefined) {\n        return state;\n      }\n      return action.min;\n    case RATING_ACTION.max:\n      return action.max;\n    case RATING_ACTION.reset:\n      return null;\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}