{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, guid, noop, Keys, dispatchEvent, getTabIndex, createPropsContext, withPropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { provideLocalizationService } from '@progress/kendo-react-intl';\nimport { messages, switchValidation } from './../messages';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/** @hidden */\nvar SwitchWithoutContext = /** @class */function (_super) {\n  __extends(SwitchWithoutContext, _super);\n  /**\n   * @hidden\n   */\n  function SwitchWithoutContext(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n    _this.setValidity = function () {\n      if (_this._input && _this._input.setCustomValidity) {\n        _this._input.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || _this.defaultValidationMessage.toLanguageString(switchValidation, messages[switchValidation]));\n      }\n    };\n    _this.limit = function (offset, drag, wrapper) {\n      var wrapperWidth = wrapper.offsetWidth;\n      var margin = drag.offsetWidth;\n      if (offset < 0) {\n        return 0;\n      } else if (offset > wrapperWidth - margin) {\n        return wrapperWidth - margin;\n      }\n      return offset;\n    };\n    _this.toggle = function (value, event) {\n      _this.setState({\n        checked: value\n      });\n      _this.valueDuringOnChange = value;\n      dispatchEvent(_this.props.onChange, event, _this, {\n        value: value\n      });\n      _this.valueDuringOnChange = undefined;\n    };\n    _this._element = null;\n    _this._wrapper = null;\n    _this._input = null;\n    _this._id = guid();\n    _this.defaultValidationMessage = provideLocalizationService(_this);\n    /**\n     * @hidden\n     */\n    _this.focus = function () {\n      if (_this._element) {\n        _this._element.focus();\n      }\n    };\n    _this.dummyInput = function (value) {\n      /* Dummy component to support forms */\n      return React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: _this.props.checked,\n        ref: function ref(el) {\n          _this._input = el;\n        },\n        tabIndex: -1,\n        \"aria-hidden\": true,\n        value: value,\n        style: {\n          opacity: 0,\n          width: 1,\n          border: 0,\n          zIndex: -1,\n          position: 'absolute',\n          left: '50%'\n        },\n        onChange: noop\n      });\n    };\n    _this.handleClick = function (event) {\n      if (_this.eventTimeStamp === event.timeStamp) {\n        // This is guard against the case when wrapped in label, click event is emmited twice\n        return;\n      }\n      _this.eventTimeStamp = event.timeStamp;\n      _this.toggle(!_this.value, event);\n    };\n    _this.handleKeyDown = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n      var keyCode = event.keyCode;\n      if (keyCode === Keys.space || keyCode === Keys.enter) {\n        _this.toggle(!_this.value, event);\n        event.preventDefault();\n      }\n    };\n    _this.handleWrapperFocus = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n      _this.setState({\n        focused: true\n      });\n      var onFocus = _this.props.onFocus;\n      if (onFocus) {\n        onFocus.call(undefined, event);\n      }\n    };\n    _this.handleWrapperBlur = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n      _this.setState({\n        focused: false\n      });\n      var onBlur = _this.props.onBlur;\n      if (onBlur) {\n        onBlur.call(undefined, event);\n      }\n    };\n    validatePackage(packageMetadata);\n    _this.state = {\n      checked: props.defaultChecked || SwitchWithoutContext.defaultProps.defaultChecked,\n      focused: false\n    };\n    return _this;\n  }\n  Object.defineProperty(SwitchWithoutContext.prototype, \"value\", {\n    /**\n     * Gets the value of the Switch.\n     */\n    get: function get() {\n      return this.valueDuringOnChange !== undefined ? this.valueDuringOnChange : this.props.checked !== undefined ? this.props.checked : this.state.checked;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"element\", {\n    get: function get() {\n      return this._element;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"actionElement\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this._wrapper;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the Switch.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the Switch is set.\n     */\n    get: function get() {\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = this.props.valid !== undefined ? this.props.valid : !this.props.required ? true : this.value ? true : false;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : SwitchWithoutContext.defaultProps.validityStyles;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SwitchWithoutContext.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : SwitchWithoutContext.defaultProps.required;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n  SwitchWithoutContext.prototype.componentDidMount = function () {\n    this.setValidity();\n    // Due to dynamic dir calculation\n    this.forceUpdate();\n  };\n  /**\n   * @hidden\n   */\n  SwitchWithoutContext.prototype.componentDidUpdate = function () {\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n  SwitchWithoutContext.prototype.render = function () {\n    var _a, _b, _c;\n    var _this = this;\n    var focused = this.state.focused;\n    var _d = this.props,\n      dir = _d.dir,\n      disabled = _d.disabled,\n      trackRounded = _d.trackRounded,\n      thumbRounded = _d.thumbRounded,\n      size = _d.size,\n      id = _d.id,\n      offLabel = _d.offLabel,\n      onLabel = _d.onLabel,\n      tabIndex = _d.tabIndex;\n    this.dir = dir || this._wrapper && getComputedStyle(this._wrapper).direction || undefined;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var switchClassName = classNames('k-switch', (_a = {}, _a[\"k-switch-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[trackRounded] || trackRounded)] = trackRounded, _a['k-switch-on'] = this.value, _a['k-switch-off'] = !this.value, _a['k-focus'] = focused, _a['k-disabled'] = disabled, _a['k-invalid'] = !isValid, _a), this.props.className);\n    var ariaAttributes = {\n      'aria-checked': this.value,\n      'aria-disabled': disabled || undefined\n    };\n    return React.createElement(\"span\", {\n      ref: function ref(span) {\n        _this._wrapper = span;\n      },\n      className: switchClassName,\n      dir: this.dir,\n      onKeyDown: this.handleKeyDown,\n      onClick: this.handleClick,\n      onBlur: this.handleWrapperBlur,\n      onFocus: this.handleWrapperFocus\n    }, React.createElement(\"span\", __assign({\n      className: classNames('k-switch-track', (_b = {}, _b[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[trackRounded] || trackRounded)] = trackRounded, _b)),\n      id: id || this._id,\n      role: 'switch'\n    }, ariaAttributes, {\n      \"aria-labelledby\": this.props.ariaLabelledBy,\n      \"aria-describedby\": this.props.ariaDescribedBy,\n      ref: function ref(span) {\n        _this._element = span;\n      },\n      tabIndex: getTabIndex(tabIndex, disabled, undefined),\n      accessKey: this.props.accessKey\n    }), this.dummyInput(this.value), React.createElement(\"span\", {\n      className: 'k-switch-label-on'\n    }, onLabel), React.createElement(\"span\", {\n      className: 'k-switch-label-off'\n    }, offLabel)), React.createElement(\"span\", {\n      className: 'k-switch-thumb-wrap'\n    }, React.createElement(\"span\", {\n      className: classNames('k-switch-thumb', (_c = {}, _c[\"k-rounded-\".concat(thumbRounded)] = thumbRounded, _c))\n    })));\n  };\n  SwitchWithoutContext.displayName = 'Switch';\n  /**\n   * @hidden\n   */\n  SwitchWithoutContext.propTypes = {\n    accessKey: PropTypes.string,\n    checked: PropTypes.bool,\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    defaultChecked: PropTypes.bool,\n    size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n    trackRounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n    thumbRounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n    dir: PropTypes.string,\n    id: PropTypes.string,\n    ariaLabelledBy: PropTypes.string,\n    ariaDescribedBy: PropTypes.string,\n    offLabel: PropTypes.string,\n    required: PropTypes.bool,\n    tabIndex: PropTypes.number,\n    valid: PropTypes.bool,\n    validate: PropTypes.bool,\n    validationMessage: PropTypes.string,\n    onBlur: PropTypes.any,\n    onChange: PropTypes.any,\n    onFocus: PropTypes.any,\n    onLabel: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n  SwitchWithoutContext.defaultProps = {\n    disabled: false,\n    defaultChecked: false,\n    size: 'medium',\n    trackRounded: 'full',\n    thumbRounded: 'full',\n    offLabel: 'OFF',\n    onBlur: noop,\n    onFocus: noop,\n    onLabel: 'ON',\n    required: false,\n    validityStyles: true\n  };\n  return SwitchWithoutContext;\n}(React.Component);\nexport { SwitchWithoutContext };\n/**\n * Represents the PropsContext of the `Switch` component.\n * Used for global configuration of all `Switch` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var SwitchPropsContext = createPropsContext();\n/* eslint-disable @typescript-eslint/no-redeclare -- intentionally naming the component the same as the type */\n/**\n * Represents the [KendoReact Switch component]({% slug overview_switch %}).\n *\n * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).\n * Obtaining the `ref` returns an object of type [SwitchHandle]({% slug api_inputs_switchhandle %}).\n */\nexport var Switch = withPropsContext(SwitchPropsContext, SwitchWithoutContext);\nSwitch.displayName = 'KendoReactSwitch';","map":null,"metadata":{},"sourceType":"module"}