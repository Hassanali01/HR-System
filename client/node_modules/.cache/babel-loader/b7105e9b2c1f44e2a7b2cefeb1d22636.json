{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar DEFAULT_NUMBER = 1111111.1111111;\nvar MAX_DECIMAL = 0.31111111111111117;\nvar MIN_DECIMAL = 1;\nvar ONE_NUMBER = 1;\nvar ZERO_NUMBER = 0;\nvar DIGITS_REGEX = /\\d/;\nvar MAX_PRECISION = 15;\n/**\n * @hidden\n */\nexport var getInitialState = function getInitialState() {\n  return {\n    eventValue: null,\n    prevLooseValue: '',\n    currentLooseValue: '',\n    focused: false,\n    selectionStart: undefined,\n    selectionEnd: undefined,\n    decimalSelect: false,\n    valueIsCorrected: false,\n    valueIsOutOfRange: false\n  };\n};\n/**\n * @hidden\n */\nexport var getStateOrPropsValue = function getStateOrPropsValue(value, stateValue) {\n  return value !== undefined ? value : stateValue;\n};\n/**\n * @hidden\n */\nexport var formatValue = function formatValue(value, format, intlService) {\n  if (value === null && value === undefined) {\n    return '';\n  }\n  if (typeof value === 'string') {\n    return value;\n  }\n  return intlService.formatNumber(value, format);\n};\n/**\n * @hidden\n */\nexport var fractionLength = function fractionLength(value) {\n  return (String(value).split('.')[1] || '').length;\n};\n/**\n * @hidden\n */\nvar maxFractionLength = function maxFractionLength(value1, value2) {\n  return Math.max(fractionLength(value1), fractionLength(value2));\n};\n/**\n * @hidden\n */\nexport var limitPrecision = function limitPrecision(precision) {\n  return Math.min(precision, MAX_PRECISION);\n};\n/**\n * @hidden\n */\nexport var toFixedPrecision = function toFixedPrecision(value, precision) {\n  var maxPrecision = limitPrecision(precision);\n  return parseFloat(value.toFixed(maxPrecision));\n};\n/**\n * @hidden\n */\nexport var increaseValue = function increaseValue(value, newState, step, min, max, format, intlService) {\n  var maxPrecision = maxFractionLength(value || 0, step || 0);\n  var increasedValue = rangeValue(toFixedPrecision((value || 0) + (step || 0), maxPrecision), min, max);\n  newState.eventValue = increasedValue;\n  newState.currentLooseValue = formatValue(increasedValue, format, intlService);\n  newState.selectionStart = newState.selectionEnd = getLastNumberIndex(newState.currentLooseValue, DIGITS_REGEX);\n};\n/**\n * @hidden\n */\nexport var decreaseValue = function decreaseValue(value, newState, step, min, max, format, intlService) {\n  var maxPrecision = maxFractionLength(value || 0, step || 0);\n  var decreasedValue = rangeValue(toFixedPrecision((value || 0) - (step || 0), maxPrecision), min, max);\n  newState.eventValue = decreasedValue;\n  newState.currentLooseValue = formatValue(decreasedValue, format, intlService);\n  newState.selectionStart = newState.selectionEnd = getLastNumberIndex(newState.currentLooseValue, DIGITS_REGEX);\n};\n/**\n * @hidden\n */\nexport var rangeValue = function rangeValue(value, min, max) {\n  if (value == null) {\n    return value;\n  }\n  if (!(value > 1 || value < 1 || value === 1)) {\n    // null, undefined or NaN\n    return null;\n  }\n  if (max !== undefined && min !== undefined && max < min) {\n    return null;\n  }\n  if (max !== undefined && value > max) {\n    value = max;\n  }\n  if (min !== undefined && value < min) {\n    value = min;\n  }\n  return value;\n};\n/**\n * @hidden\n */\nexport var getMaxCursorPosition = function getMaxCursorPosition(nextValue, formatInfo) {\n  var formatSuffixIndex = formatInfo.findIndex(function (_a) {\n    var _ = _a[0],\n      currSuffix = _a[1];\n    return Boolean(currSuffix) && nextValue.indexOf(currSuffix) === nextValue.length - currSuffix.length;\n  });\n  if (formatSuffixIndex === -1) {\n    return -1;\n  }\n  var suffix = formatInfo[formatSuffixIndex][1];\n  return nextValue.length - suffix.length;\n};\n/**\n * @hidden\n */\nexport var getMinCursorPosition = function getMinCursorPosition(nextValue, formatInfo) {\n  var formatPrefixIndex = formatInfo.findIndex(function (_a) {\n    var currPrefix = _a[0],\n      _ = _a[1];\n    return Boolean(currPrefix) && nextValue.indexOf(currPrefix) === 0;\n  });\n  if (formatPrefixIndex === -1) {\n    return -1;\n  }\n  var prefix = formatInfo[formatPrefixIndex][0];\n  return prefix.length;\n};\n/**\n * @hidden\n */\nexport var rangeSelection = function rangeSelection(nextLooseValue, formatInfo, newState) {\n  var maxPosition = getMaxCursorPosition(nextLooseValue, formatInfo);\n  if (maxPosition !== -1 && newState.selectionStart > maxPosition) {\n    newState.selectionStart = newState.selectionEnd = maxPosition;\n    return;\n  }\n  if (newState.selectionStart > nextLooseValue.length) {\n    newState.selectionStart = newState.selectionEnd = nextLooseValue.length;\n  }\n  var minPosition = getMinCursorPosition(nextLooseValue, formatInfo);\n  if (minPosition !== -1 && newState.selectionStart < minPosition) {\n    newState.selectionStart = newState.selectionEnd = minPosition;\n  }\n  if (newState.selectionStart === -1) {\n    newState.selectionStart = newState.selectionEnd = 0;\n  }\n};\n/**\n * @hidden\n */\nexport var setSelection = function setSelection(newState, newIndex, nextLooseValue, formatInfo) {\n  newState.selectionStart = newState.selectionEnd = newIndex;\n  rangeSelection(nextLooseValue, formatInfo, newState);\n};\n/**\n * @hidden\n */\nexport var setInvalid = function setInvalid(newState, format, formatInfo, intlService) {\n  newState.eventValue = intlService.parseNumber(newState.prevLooseValue, format);\n  newState.currentLooseValue = newState.prevLooseValue;\n  newState.valueIsCorrected = true;\n  setSelection(newState, newState.selectionStart, newState.currentLooseValue, formatInfo);\n};\n/**\n * @hidden\n */\nexport var isMinusSymbolAdded = function isMinusSymbolAdded(newState, symbols) {\n  var newText = String(newState.currentLooseValue);\n  var oldText = String(newState.prevLooseValue);\n  return newText.split(symbols.minusSign).length !== oldText.split(symbols.minusSign).length && newText.length === oldText.length + symbols.minusSign.length;\n};\n/**\n * @hidden\n */\nexport var isMinusSymbolRemoved = function isMinusSymbolRemoved(newState, symbols) {\n  var newText = String(newState.currentLooseValue);\n  var oldText = String(newState.prevLooseValue);\n  return newText.indexOf(symbols.minusSign) === -1 && oldText.indexOf(symbols.minusSign) !== -1;\n};\n/**\n * @hidden\n */\nexport var isDecimalDuplicated = function isDecimalDuplicated(newState, symbols) {\n  var newText = String(newState.currentLooseValue);\n  return newText.split(symbols.decimal).length > 2;\n};\n/**\n * @hidden\n */\nexport var getFormatPrefixSufix = function getFormatPrefixSufix(format, intlService) {\n  var positiveResult = intlService.formatNumber(DEFAULT_NUMBER, format);\n  var negativeResult = intlService.formatNumber(-DEFAULT_NUMBER, format);\n  var zeroResult = intlService.formatNumber(ZERO_NUMBER, format);\n  var oneResult = intlService.formatNumber(ONE_NUMBER, format);\n  var positivePrefix = getPrefix(positiveResult);\n  var negativePrefix = getPrefix(negativeResult);\n  var zeroPrefix = getPrefix(zeroResult);\n  var onePrefix = getPrefix(oneResult);\n  var positiveSuffix = getSuffix(positiveResult);\n  var negativeSuffix = getSuffix(negativeResult);\n  var zeroSuffix = getSuffix(zeroResult);\n  var oneSuffix = getSuffix(oneResult);\n  return {\n    positiveInfo: [positivePrefix, positiveSuffix],\n    negativeInfo: [negativePrefix, negativeSuffix],\n    zeroInfo: [zeroPrefix, zeroSuffix],\n    oneInfo: [onePrefix, oneSuffix]\n  };\n};\n/**\n * @hidden\n */\nexport var getFormatSymbols = function getFormatSymbols(format, intlService) {\n  var positiveResult = intlService.formatNumber(DEFAULT_NUMBER, format);\n  var negativeResult = intlService.formatNumber(-DEFAULT_NUMBER, format);\n  var zeroResult = intlService.formatNumber(ZERO_NUMBER, format);\n  var oneResult = intlService.formatNumber(ONE_NUMBER, format);\n  var symbols = intlService.numberSymbols();\n  var sanitizeRegex = new RegExp(\"[\\\\d\\\\\".concat(symbols.decimal).concat(symbols.group, \"]\"), 'g');\n  var resultWithDuplicates = [positiveResult, negativeResult, zeroResult, oneResult].map(function (result) {\n    return result.replace(sanitizeRegex, '');\n  }).join('');\n  return resultWithDuplicates.split('').filter(function (x, n, s) {\n    return s.indexOf(x) === n;\n  }).join('');\n};\n/**\n * @hidden\n */\nexport var getInitialPosition = function getInitialPosition(nextLooseValue, symbols) {\n  var decimalIdex = nextLooseValue.indexOf(symbols.decimal);\n  if (decimalIdex > -1) {\n    return decimalIdex;\n  }\n  return getLastNumberIndex(nextLooseValue, DIGITS_REGEX);\n};\n/**\n * @hidden\n */\nexport var reverseString = function reverseString(str) {\n  return str.split('').reverse().join('');\n};\n/**\n * @hidden\n */\nexport var getLastNumberIndex = function getLastNumberIndex(currentLooseValue, inputRegex) {\n  return currentLooseValue.length - reverseString(currentLooseValue).search(inputRegex);\n};\n/**\n * @hidden\n */\nexport var getPrefix = function getPrefix(str) {\n  return str.split(str[str.search(DIGITS_REGEX)])[0];\n};\n/**\n * @hidden\n */\nexport var getSuffix = function getSuffix(str) {\n  var reversedString = reverseString(str);\n  return reverseString(reversedString.split(reversedString[reversedString.search(DIGITS_REGEX)])[0]);\n};\n/**\n * @hidden\n */\nexport var getFirstNumberIndex = function getFirstNumberIndex(prevLooseValue, inputRegex) {\n  return prevLooseValue.search(inputRegex);\n};\n/**\n * @hidden\n */\nexport var getDecimalCount = function getDecimalCount(value, decimal) {\n  var currentDecimalPlace = value.indexOf(decimal);\n  return currentDecimalPlace > -1 ? value.length - currentDecimalPlace - 1 : 0;\n};\n/**\n * @hidden\n */\nexport var changeBasedSelection = function changeBasedSelection(currentValue, nextValue, selectionPosition, isDelete, sanitizeRegex) {\n  var isCurrentLeadingZero = currentValue.replace(sanitizeRegex, '')[0] === '0';\n  var isNextLeadingZero = nextValue.replace(sanitizeRegex, '')[0] === '0';\n  if (isCurrentLeadingZero && !isNextLeadingZero) {\n    return selectionPosition - 1;\n  }\n  if (isNextLeadingZero && isDelete) {\n    return selectionPosition + 1;\n  }\n  var numberCounter = 0;\n  for (var idx = 0; idx < selectionPosition; idx++) {\n    if (DIGITS_REGEX.test(currentValue.charAt(idx))) {\n      numberCounter++;\n    }\n  }\n  var newSelection = 0;\n  while (numberCounter > 0 && nextValue.length > newSelection) {\n    if (DIGITS_REGEX.test(nextValue.charAt(newSelection))) {\n      numberCounter--;\n    }\n    newSelection++;\n  }\n  return newSelection;\n};\n/**\n * @hidden\n */\nexport var sanitizeNumber = function sanitizeNumber(state, format, intlService) {\n  var newState = __assign({}, state);\n  var prevLooseValue = newState.prevLooseValue;\n  var symbols = intlService.numberSymbols();\n  var restrictedSymbols = getFormatSymbols(format, intlService);\n  var currentLooseValueAsString = String(newState.currentLooseValue);\n  var prevLooseValueAsString = String(prevLooseValue);\n  var sanitizeRegex = new RegExp(\"[^\\\\d\\\\\".concat(symbols.decimal, \"]\"), 'g');\n  var sanitizeGroupRegex = new RegExp(\"[^\\\\d\\\\\".concat(symbols.decimal, \"\\\\\").concat(symbols.group, \"]\"), 'g');\n  var allSymbolsRegex = new RegExp(\"[\\\\d\\\\\".concat(symbols.decimal, \"\\\\\").concat(symbols.group, \"]\"));\n  var sanitizedString = currentLooseValueAsString.replace(sanitizeRegex, '');\n  var numberStart = getFirstNumberIndex(currentLooseValueAsString, DIGITS_REGEX);\n  var numberEnd = numberStart === -1 ? -1 : getLastNumberIndex(currentLooseValueAsString, DIGITS_REGEX);\n  var decimalIndex = currentLooseValueAsString.indexOf(symbols.decimal);\n  var sanitizedFormattedString = (currentLooseValueAsString.substring(0, numberStart) + currentLooseValueAsString.substring(numberStart, numberEnd).replace(sanitizeGroupRegex, '') + currentLooseValueAsString.substring(numberEnd, currentLooseValueAsString.length)).split('').filter(function (s) {\n    return restrictedSymbols.indexOf(s) !== -1 || s.search(allSymbolsRegex) !== -1;\n  }).join('');\n  var formattedMax = intlService.formatNumber(MAX_DECIMAL, format).replace(sanitizeRegex, '');\n  var maxDecimalIndex = formattedMax.indexOf(symbols.decimal);\n  var maxDecimalCount = maxDecimalIndex > -1 ? formattedMax.length - maxDecimalIndex - 1 : 0;\n  var formattedMin = intlService.formatNumber(MIN_DECIMAL, format).replace(sanitizeRegex, '');\n  var minDecimalIndex = formattedMin.indexOf(symbols.decimal);\n  var minDecimalCount = minDecimalIndex > -1 ? formattedMin.length - minDecimalIndex - 1 : 0;\n  var _a = getFormatPrefixSufix(format, intlService),\n    positiveInfo = _a.positiveInfo,\n    negativeInfo = _a.negativeInfo,\n    zeroInfo = _a.zeroInfo,\n    oneInfo = _a.oneInfo;\n  var formatInfo = [positiveInfo, negativeInfo, zeroInfo, oneInfo];\n  var isFormatContainPrefixSuffix = formatInfo.findIndex(function (info) {\n    return info.findIndex(function (nestedInfo) {\n      return Boolean(nestedInfo);\n    }) !== -1;\n  }) !== 1;\n  var isDelete = currentLooseValueAsString.length > 0 && currentLooseValueAsString.length < prevLooseValueAsString.length;\n  var isPercentFormat = typeof format === 'string' && format[0] === 'p' && currentLooseValueAsString && currentLooseValueAsString.indexOf(symbols.percentSign) === -1;\n  if (!newState.isPaste) {\n    // 1. Empty input\n    if (currentLooseValueAsString === '') {\n      newState.eventValue = null;\n      newState.currentLooseValue = '';\n      return newState;\n    }\n    // 2. Check is minus sign\n    if (newState.currentLooseValue === symbols.minusSign && intlService.formatNumber(-0, format) !== prevLooseValueAsString) {\n      newState.eventValue = -0;\n      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);\n      setSelection(newState, getInitialPosition(newState.currentLooseValue, symbols), newState.currentLooseValue, formatInfo);\n      return newState;\n    }\n    // 3. Minus sign toggle\n    if (isMinusSymbolAdded(newState, symbols)) {\n      var nextValue = intlService.parseNumber(prevLooseValue, format);\n      newState.eventValue = -(nextValue !== null ? nextValue : 0);\n      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);\n      var currentNumberStart = getFirstNumberIndex(newState.currentLooseValue, DIGITS_REGEX);\n      var oldNumberStart = getFirstNumberIndex(prevLooseValueAsString, DIGITS_REGEX);\n      setSelection(newState, newState.selectionEnd - 1 + (currentNumberStart - oldNumberStart), newState.currentLooseValue, formatInfo);\n      return newState;\n    }\n    if (isMinusSymbolRemoved(newState, symbols)) {\n      newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n      setSelection(newState, newState.selectionStart, newState.currentLooseValue, formatInfo);\n      return newState;\n    }\n    // 4. Check is decimal symbol\n    if (newState.currentLooseValue === symbols.decimal) {\n      newState.eventValue = 0;\n      var valueCandidate = formatValue(newState.eventValue, format, intlService);\n      if (minDecimalCount === 0 && maxDecimalCount > 0) {\n        var currentLastNumberIndex = getLastNumberIndex(valueCandidate, DIGITS_REGEX);\n        newState.currentLooseValue = valueCandidate.substring(0, currentLastNumberIndex) + symbols.decimal + valueCandidate.substring(currentLastNumberIndex);\n      } else {\n        newState.currentLooseValue = valueCandidate;\n      }\n      setSelection(newState, getInitialPosition(newState.currentLooseValue, symbols) + 1, newState.currentLooseValue, formatInfo);\n      return newState;\n    }\n    // 5. Duplicate decimal - it's possible only as trailing\n    if (isDecimalDuplicated(newState, symbols)) {\n      setInvalid(newState, format, formatInfo, intlService);\n      return newState;\n    }\n    // 6. Percent format\n    if (isPercentFormat) {\n      newState.eventValue = intlService.parseNumber(currentLooseValueAsString, format) / 100;\n      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);\n      return newState;\n    }\n    // 7. More than 15 numeric symbols\n    var numericSymbols = String(newState.currentLooseValue).replace(/[^\\d]/g, '');\n    if (numericSymbols.length > MAX_PRECISION) {\n      setInvalid(newState, format, formatInfo, intlService);\n      return newState;\n    }\n    // 8. Check prefix / suffix for modifications\n    if (sanitizedString !== currentLooseValueAsString && currentLooseValueAsString && isFormatContainPrefixSuffix) {\n      var formatInfoIndex = formatInfo.findIndex(function (_a) {\n        var prefix = _a[0],\n          suffix = _a[1];\n        var prefixIndex = currentLooseValueAsString.indexOf(prefix);\n        var suffixIndex = currentLooseValueAsString.indexOf(suffix);\n        var prefixFound = prefixIndex === 0;\n        var suffixFound = suffixIndex === currentLooseValueAsString.length - suffix.length;\n        var prefixGap = prefixIndex + prefix.length !== numberStart && numberStart !== -1 && currentLooseValueAsString[prefixIndex + prefix.length] !== symbols.decimal;\n        var suffixGap = suffixIndex !== numberEnd && numberEnd !== -1 && currentLooseValueAsString[suffixIndex - 1] !== symbols.decimal;\n        if (prefix && suffix) {\n          if (prefixGap || suffixGap) {\n            return false;\n          }\n          return prefixFound && suffixFound;\n        }\n        if (prefix) {\n          if (prefixGap) {\n            return false;\n          }\n          return prefixFound;\n        }\n        if (suffix) {\n          if (suffixGap) {\n            return false;\n          }\n          return suffixFound;\n        }\n        return false;\n      });\n      if (formatInfoIndex === -1) {\n        setInvalid(newState, format, formatInfo, intlService);\n        return newState;\n      }\n    }\n    // 9. Value ending on decimal separator (here as decimal might be typed inside format)\n    if (sanitizedString[sanitizedString.length - 1] === symbols.decimal && maxDecimalCount > 0) {\n      newState.eventValue = intlService.parseNumber(currentLooseValueAsString, format);\n      newState.currentLooseValue = sanitizedFormattedString;\n      return newState;\n    }\n    // 10. prevent deleting decimal and group symbols\n    if (newState.currentLooseValue && prevLooseValue) {\n      var isSpecialSymbolDeleted = (restrictedSymbols + symbols.decimal + symbols.group).split('').findIndex(function (s) {\n        if (currentLooseValueAsString.split('').filter(function (x) {\n          return x === s;\n        }).length < prevLooseValueAsString.split('').filter(function (x) {\n          return x === s;\n        }).length && currentLooseValueAsString.length + 1 === prevLooseValueAsString.length) {\n          if (s === symbols.decimal && getDecimalCount(prevLooseValueAsString.replace(sanitizeRegex, ''), symbols.decimal) === 0) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      }) > -1;\n      if (isSpecialSymbolDeleted) {\n        newState.eventValue = intlService.parseNumber(state.prevLooseValue, format);\n        newState.currentLooseValue = state.prevLooseValue;\n        return newState;\n      }\n    }\n    var currentDecimalCount = getDecimalCount(sanitizedString, symbols.decimal);\n    var endsOnDecimal = sanitizedString[sanitizedString.length - 1] === '0';\n    // 11. Deleting more decimals than allowed\n    if (isDelete && endsOnDecimal && currentDecimalCount < minDecimalCount) {\n      newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n      newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);\n      return newState;\n    }\n    // 12. Ending on zero OR more decimals than allowed\n    if (currentDecimalCount > 0) {\n      var valueUntillDecimal = currentLooseValueAsString.substring(0, decimalIndex);\n      if (endsOnDecimal && (!valueUntillDecimal || prevLooseValueAsString.indexOf(valueUntillDecimal) !== 0)) {\n        // ending on zero but typing before decimal separator\n        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n        var nextLooseValue = formatValue(newState.eventValue, format, intlService);\n        setSelection(newState, changeBasedSelection(currentLooseValueAsString, nextLooseValue, newState.selectionEnd, isDelete, sanitizeRegex), nextLooseValue, formatInfo);\n        newState.currentLooseValue = nextLooseValue;\n        return newState;\n      }\n      if (currentDecimalCount > maxDecimalCount) {\n        // typing more symbols than format allows\n        var looseDecimalPlace = currentLooseValueAsString.indexOf(symbols.decimal);\n        var result = currentLooseValueAsString.substring(0, looseDecimalPlace) + currentLooseValueAsString.substring(looseDecimalPlace, looseDecimalPlace + 1 + maxDecimalCount) + currentLooseValueAsString.substring(numberEnd, String(newState.currentLooseValue).length);\n        newState.eventValue = intlService.parseNumber(result, format);\n        newState.currentLooseValue = result;\n        setSelection(newState, newState.selectionStart, result, formatInfo);\n        return newState;\n      }\n      if (minDecimalCount !== maxDecimalCount && currentDecimalCount <= maxDecimalCount && endsOnDecimal) {\n        // adding trailing zeroes\n        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n        newState.currentLooseValue = sanitizedFormattedString;\n        return newState;\n      }\n      if (currentDecimalCount < minDecimalCount) {\n        // deleting more decimals than allowed\n        newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n        newState.currentLooseValue = formatValue(newState.eventValue, format, intlService);\n        return newState;\n      }\n    }\n  }\n  // X. All other values should be parsed\n  newState.eventValue = intlService.parseNumber(newState.currentLooseValue, format);\n  if (isPercentFormat) {\n    newState.eventValue = newState.eventValue / 100;\n  }\n  if (typeof newState.eventValue === 'number') {\n    var nextLooseValue = formatValue(newState.eventValue, format, intlService);\n    // First digit add\n    if (currentLooseValueAsString.length === 1) {\n      setSelection(newState, getInitialPosition(nextLooseValue, symbols), nextLooseValue, formatInfo);\n    } else {\n      setSelection(newState, changeBasedSelection(currentLooseValueAsString, nextLooseValue, newState.selectionEnd, isDelete, sanitizeRegex), nextLooseValue, formatInfo);\n    }\n    newState.currentLooseValue = nextLooseValue;\n  } else {\n    // Case when deleting last number\n    newState.currentLooseValue = formatValue(intlService.parseNumber(sanitizedString), format, intlService);\n  }\n  return newState;\n};","map":null,"metadata":{},"sourceType":"module"}