{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { RadioButton } from './RadioButton';\nimport { useRtl, guid, classNames, focusFirstFocusableChild, dispatchEvent, createPropsContext, usePropsContext } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the PropsContext of the `RadioGroup` component.\n * Used for global configuration of all `RadioGroup` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var RadioGroupPropsContext = createPropsContext();\n/**\n * Represents the [KendoReact RadioGroup component]({% slug overview_radiogroup %}).\n *\n * Accepts properties of type [RadioGroupProps]({% slug api_inputs_radiogroupprops %}).\n * Obtaining the `ref` returns an object of type [RadioGroupHandle]({% slug api_inputs_radiogrouphandle %}).\n */\nexport var RadioGroup = React.forwardRef(function (directProps, target) {\n  validatePackage(packageMetadata);\n  var props = usePropsContext(RadioGroupPropsContext, directProps);\n  var ariaLabelledBy = props.ariaLabelledBy,\n    ariaDescribedBy = props.ariaDescribedBy,\n    className = props.className,\n    data = props.data,\n    defaultValue = props.defaultValue,\n    disabled = props.disabled,\n    name = props.name,\n    labelPlacement = props.labelPlacement,\n    layout = props.layout,\n    style = props.style,\n    value = props.value,\n    valid = props.valid,\n    _a = props.item,\n    Item = _a === void 0 ? defaultProps.item : _a,\n    onChange = props.onChange,\n    onFocus = props.onFocus;\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      focusFirstFocusableChild(elementRef.current);\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var _b = React.useState(defaultValue),\n    stateChecked = _b[0],\n    setStateChecked = _b[1];\n  var isControlled = value !== undefined;\n  var checkedRadioValue = isControlled ? value : stateChecked;\n  var handleChange = React.useCallback(function (event) {\n    var currentValue = event.value;\n    if (!isControlled && !disabled) {\n      setStateChecked(currentValue);\n    }\n    if (onChange && !disabled) {\n      dispatchEvent(onChange, event.syntheticEvent, getImperativeHandle(), {\n        value: currentValue\n      });\n    }\n  }, [setStateChecked, onChange, disabled]);\n  var handleFocus = React.useCallback(function (event) {\n    if (onFocus && !disabled) {\n      dispatchEvent(onFocus, event.syntheticEvent, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, disabled]);\n  var radioGroupName = React.useMemo(function () {\n    return guid();\n  }, []);\n  var radioGroupClasses = classNames('k-radio-list', {\n    'k-list-horizontal': layout === 'horizontal',\n    'k-list-vertical': layout === 'vertical' || layout === undefined\n  }, className);\n  var dir = useRtl(elementRef, props.dir);\n  var radioOptions = data && data.map(function (option, index) {\n    var isCurrentlyChecked = checkedRadioValue === option.value;\n    var noOptionChecked = checkedRadioValue === null || checkedRadioValue === undefined;\n    var radioButtonProps = __assign(__assign({}, option), {\n      valid: valid,\n      checked: isCurrentlyChecked,\n      disabled: option.disabled || disabled ? true : false,\n      labelPlacement: option.labelPlacement ? option.labelPlacement : labelPlacement,\n      tabIndex: option.tabIndex ? option.tabIndex : noOptionChecked && index === 0 || isCurrentlyChecked ? 0 : -1,\n      index: index,\n      name: name || radioGroupName,\n      onChange: handleChange,\n      onFocus: handleFocus\n    });\n    return React.createElement(Item, {\n      className: classNames('k-radio-item', {\n        'k-disabled': radioButtonProps.disabled || disabled\n      }),\n      key: index,\n      role: 'none'\n    }, React.createElement(RadioButton, __assign({}, radioButtonProps)));\n  });\n  return React.createElement(\"ul\", {\n    role: \"radiogroup\",\n    className: radioGroupClasses,\n    ref: elementRef,\n    dir: dir,\n    style: style,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy\n  }, radioOptions);\n});\nvar defaultProps = {\n  item: function item(props) {\n    return React.createElement(\"li\", __assign({}, props));\n  }\n};\nRadioGroup.propTypes = {\n  ariaLabelledBy: PropTypes.string,\n  ariaDescribedBy: PropTypes.string,\n  className: PropTypes.string,\n  data: PropTypes.arrayOf(PropTypes.object),\n  defaultValue: PropTypes.any,\n  dir: PropTypes.string,\n  disabled: PropTypes.bool,\n  labelPlacement: PropTypes.string,\n  layout: PropTypes.string,\n  name: PropTypes.string,\n  style: PropTypes.object,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func\n};\nRadioGroup.defaultProps = defaultProps;\nRadioGroup.displayName = 'KendoRadioGroup';","map":null,"metadata":{},"sourceType":"module"}