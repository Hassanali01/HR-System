{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, useDir } from '@progress/kendo-react-common';\n/**\n * Represents the RatingItem component.\n */\nexport var RatingItem = React.forwardRef(function (props, ref) {\n  var target = React.useRef(null);\n  var element = React.useRef(null);\n  var dir = useDir(element, props.dir);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: element.current,\n      props: props,\n      value: props.value\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var handleClick = React.useCallback(function (event) {\n    if (props.onClick) {\n      props.onClick.call(undefined, {\n        value: props.value,\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onClick, props.value]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (props.onKeyDown) {\n      props.onKeyDown.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onKeyDown]);\n  var handleFocus = React.useCallback(function (event) {\n    if (props.onFocus) {\n      props.onFocus.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onFocus]);\n  var handleBlur = React.useCallback(function (event) {\n    if (props.onBlur) {\n      props.onBlur.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onBlur]);\n  var handleMouseMove = React.useCallback(function (event) {\n    if (props.onMouseMove) {\n      props.onMouseMove.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onMouseMove]);\n  var handleMouseEnter = React.useCallback(function (event) {\n    if (props.onMouseEnter) {\n      props.onMouseEnter.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onMouseEnter]);\n  var handleMouseLeave = React.useCallback(function (event) {\n    if (props.onMouseLeave) {\n      props.onMouseLeave.call(undefined, {\n        target: target.current,\n        syntheticEvent: event\n      });\n    }\n  }, [props.onMouseLeave]);\n  return React.createElement(\"span\", {\n    id: props.id,\n    ref: element,\n    dir: dir,\n    \"data-half\": props.half,\n    tabIndex: props.tabIndex,\n    title: props.title,\n    style: props.style,\n    className: classNames('k-rating-item', {\n      'k-rtl': dir === 'rtl',\n      'k-selected': props.selected,\n      'k-hover': props.hovered\n    }, props.className),\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onMouseMove: handleMouseMove\n  }, props.children);\n});\nvar propTypes = {\n  id: PropTypes.string,\n  icon: PropTypes.any,\n  dir: PropTypes.oneOf(['ltr', 'rtl']),\n  title: PropTypes.string,\n  value: PropTypes.number,\n  half: PropTypes.bool,\n  selected: PropTypes.bool,\n  hovered: PropTypes.bool\n};\nvar defaultProps = {\n  dir: 'ltr'\n};\nRatingItem.displayName = 'KendoReactRatingItem';\n// TODO: delete casting when @types/react is updated!\nRatingItem.propTypes = propTypes;\nRatingItem.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}