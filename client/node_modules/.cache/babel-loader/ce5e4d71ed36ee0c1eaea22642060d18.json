{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { guid, classNames, dispatchEvent, getTabIndex, createPropsContext, usePropsContext, kendoThemeMaps } from '@progress/kendo-react-common';\nimport { validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n/**\n * Represents the PropsContext of the `RadioButton` component.\n * Used for global configuration of all `RadioButton` instances.\n *\n * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.\n */\nexport var RadioButtonPropsContext = createPropsContext();\n/**\n * Represents the [KendoReact RadioButton component]({% slug overview_radiobutton %}).\n *\n * Accepts properties of type [RadioButtonProps]({% slug api_inputs_radiobuttonprops %}).\n * Obtaining the `ref` returns an object of type [RadioButtonHandle]({% slug api_inputs_radiobuttonhandle %}).\n */\nexport var RadioButton = React.forwardRef(function (directProps, target) {\n  var _a;\n  validatePackage(packageMetadata);\n  var props = usePropsContext(RadioButtonPropsContext, directProps);\n  var ariaDescribedBy = props.ariaDescribedBy,\n    checked = props.checked,\n    children = props.children,\n    className = props.className,\n    disabled = props.disabled,\n    id = props.id,\n    size = props.size,\n    label = props.label,\n    labelPlacement = props.labelPlacement,\n    name = props.name,\n    style = props.style,\n    tabIndex = props.tabIndex,\n    value = props.value,\n    valid = props.valid,\n    onChange = props.onChange,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    others = __rest(props, [\"ariaDescribedBy\", \"checked\", \"children\", \"className\", \"disabled\", \"id\", \"size\", \"label\", \"labelPlacement\", \"name\", \"style\", \"tabIndex\", \"value\", \"valid\", \"onChange\", \"onFocus\", \"onBlur\"]);\n  var elementRef = React.useRef(null);\n  var focusElement = React.useCallback(function () {\n    if (elementRef.current) {\n      elementRef.current.focus();\n    }\n  }, []);\n  var getImperativeHandle = React.useCallback(function () {\n    return {\n      element: elementRef.current,\n      focus: focusElement\n    };\n  }, [focusElement]);\n  React.useImperativeHandle(target, getImperativeHandle);\n  var calculatedId = React.useMemo(function () {\n    return guid();\n  }, []);\n  var handleChange = React.useCallback(function (event) {\n    dispatchEvent(onChange, event, getImperativeHandle(), {\n      value: value\n    });\n  }, [onChange, value, disabled]);\n  var handleFocus = React.useCallback(function (event) {\n    if (onFocus && !disabled) {\n      dispatchEvent(onFocus, event, getImperativeHandle(), undefined);\n    }\n  }, [onFocus, disabled]);\n  var handleBlur = React.useCallback(function (event) {\n    if (onBlur && !disabled) {\n      dispatchEvent(onBlur, event, getImperativeHandle(), undefined);\n    }\n  }, [onBlur, disabled]);\n  var inputProps = __assign({\n    type: 'radio',\n    id: id || calculatedId,\n    name: name,\n    className: classNames('k-radio', (_a = {}, _a[\"k-radio-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a['k-invalid'] = valid === false, _a), className),\n    ref: elementRef,\n    disabled: disabled,\n    tabIndex: getTabIndex(tabIndex, disabled),\n    checked: checked,\n    style: style,\n    'aria-describedby': ariaDescribedBy,\n    value: value,\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }, others);\n  var radioButtonLabel = React.createElement(React.Fragment, null, label !== undefined ? React.createElement(\"label\", {\n    className: 'k-radio-label',\n    htmlFor: id || calculatedId,\n    style: {\n      userSelect: 'none'\n    },\n    \"aria-label\": label\n  }, label) : null);\n  var radio = React.createElement(\"input\", __assign({}, inputProps));\n  return labelPlacement === 'before' ? React.createElement(React.Fragment, null, radioButtonLabel, radio, children) : React.createElement(React.Fragment, null, radio, radioButtonLabel, children);\n});\nRadioButton.propTypes = {\n  ariaDescribedBy: PropTypes.string,\n  checked: PropTypes.bool,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  label: PropTypes.string,\n  labelPlacement: PropTypes.string,\n  name: PropTypes.string,\n  style: PropTypes.object,\n  tabIndex: PropTypes.number,\n  value: PropTypes.any,\n  valid: PropTypes.bool,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func\n};\nvar defaultProps = {\n  size: 'medium'\n};\nRadioButton.displayName = 'KendoRadioButton';\nRadioButton.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}