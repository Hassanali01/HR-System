{"ast":null,"code":"import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, validatePackage, getTabIndex } from '@progress/kendo-react-common';\nimport { ButtonGroup, Button } from '@progress/kendo-react-buttons';\nimport { ColorPalette, ColorGradient } from '../main';\nimport { packageMetadata } from '../package-metadata';\nimport { messages, flatColorPickerApplyBtn, flatColorPickerCancelBtn } from '../messages';\n;\n;\n/**\n * Represents the FlatColorPicker component.\n */\nexport var FlatColorPicker = React.forwardRef(function (props, ref) {\n  validatePackage(packageMetadata);\n  var target = React.useRef(null);\n  var flatColorPickerRef = React.useRef(null);\n  var colorGradientRef = React.useRef(null);\n  var _a = React.useState((props.view || 'ColorGradient') === 'ColorGradient'),\n    colorGradientView = _a[0],\n    setColorGradientView = _a[1];\n  var _b = React.useState('rgba(255, 255, 255, 1)'),\n    colorValue = _b[0],\n    setColorValue = _b[1];\n  var _c = React.useState('rgba(255, 255, 255, 1)'),\n    prevColor = _c[0],\n    setPrevColor = _c[1];\n  var focus = React.useCallback(function () {\n    if (target.current) {\n      target.current.focus();\n    }\n  }, [target]);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: flatColorPickerRef.current,\n      focus: focus,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var handleViewChange = React.useCallback(function (viewType) {\n    if (viewType === 'ColorGradient' && !colorGradientView || viewType === 'ColorPalette' && colorGradientView) {\n      setColorGradientView(!colorGradientView);\n    }\n  }, [colorGradientView]);\n  var handleResetColor = React.useCallback(function () {\n    setColorValue('rgba(255, 255, 255, 1)');\n  }, []);\n  var handleColorChange = React.useCallback(function (event) {\n    setColorValue(event.value);\n  }, []);\n  var handleApplyBtnClick = React.useCallback(function () {\n    setPrevColor(colorValue);\n  }, [colorValue]);\n  var handleCancelBtnClick = React.useCallback(function () {\n    setPrevColor('rgba(255, 255, 255, 1)');\n  }, []);\n  var handlePrevColorClick = React.useCallback(function () {\n    setColorValue(prevColor);\n  }, [prevColor]);\n  var handleFocus = React.useCallback(function () {\n    if (flatColorPickerRef.current) {\n      flatColorPickerRef.current.focus();\n    }\n  }, [flatColorPickerRef]);\n  var handleFlatColorPickerBlur = React.useCallback(function () {\n    setPrevColor(colorValue);\n  }, [colorValue]);\n  return React.createElement(\"div\", {\n    id: props.id,\n    style: props.style,\n    ref: flatColorPickerRef,\n    tabIndex: getTabIndex(props.tabIndex, props.disabled),\n    className: classNames('k-flatcolorpicker k-coloreditor', {\n      'k-disabled': props.disabled\n    }, props.className),\n    onBlur: handleFlatColorPickerBlur\n  }, React.createElement(React.Fragment, null, props.header || React.createElement(\"div\", {\n    className: \"k-coloreditor-header k-hstack\"\n  }, React.createElement(\"div\", {\n    className: \"k-coloreditor-header-actions k-hstack\"\n  }, React.createElement(ButtonGroup, null, React.createElement(Button, {\n    type: \"button\",\n    togglable: true,\n    fillMode: 'flat',\n    selected: colorGradientView,\n    onClick: function onClick() {\n      return handleViewChange('ColorGradient');\n    }\n  }, React.createElement(\"span\", {\n    className: \"k-icon k-i-color-canvas\"\n  })), React.createElement(Button, {\n    type: \"button\",\n    togglable: true,\n    fillMode: 'flat',\n    selected: !colorGradientView,\n    onClick: function onClick() {\n      return handleViewChange('ColorPalette');\n    }\n  }, React.createElement(\"span\", {\n    className: \"k-icon k-i-palette\"\n  })))), React.createElement(\"div\", {\n    className: \"k-spacer\"\n  }), React.createElement(\"div\", {\n    className: \"k-coloreditor-header-actions k-hstack\"\n  }, props.showClearButton && defaultProps.showClearButton && React.createElement(Button, {\n    type: \"button\",\n    fillMode: 'flat',\n    onClick: handleResetColor\n  }, React.createElement(\"span\", {\n    className: \"k-icon k-i-droplet-slash\"\n  })), props.showPreview && defaultProps.showPreview && React.createElement(\"div\", {\n    className: \"k-coloreditor-preview k-vstack\"\n  }, React.createElement(\"span\", {\n    className: \"k-coloreditor-preview-color k-color-preview\",\n    style: {\n      background: colorValue\n    }\n  }), React.createElement(\"span\", {\n    className: \"k-coloreditor-current-color k-color-preview\",\n    style: {\n      background: prevColor\n    },\n    onClick: handlePrevColorClick\n  })))), React.createElement(\"div\", {\n    className: \"k-coloreditor-views k-vstack\"\n  }, colorGradientView ? React.createElement(ColorGradient, {\n    ref: colorGradientRef,\n    value: colorValue,\n    onChange: handleColorChange,\n    onFocus: handleFocus\n  }) : React.createElement(ColorPalette, {\n    value: colorValue,\n    onChange: handleColorChange,\n    onFocus: handleFocus\n  })), props.showButtons && defaultProps.showButtons && React.createElement(\"div\", {\n    className: \"k-coloreditor-footer k-actions k-actions-end\"\n  }, React.createElement(Button, {\n    type: \"button\",\n    className: \"k-coloreditor-cancel\",\n    onClick: handleCancelBtnClick\n  }, messages[flatColorPickerCancelBtn]), React.createElement(Button, {\n    type: \"button\",\n    className: \"k-coloreditor-apply k-primary\",\n    onClick: handleApplyBtnClick\n  }, messages[flatColorPickerApplyBtn]))));\n});\nvar propTypes = {\n  id: PropTypes.string,\n  value: PropTypes.string,\n  view: PropTypes.string,\n  header: PropTypes.elementType,\n  showClearButton: PropTypes.bool,\n  showPreview: PropTypes.bool,\n  showButtons: PropTypes.bool\n};\nvar defaultProps = {\n  showClearButton: true,\n  showPreview: true,\n  showButtons: true\n};\nFlatColorPicker.displayName = 'KendoFlatColorPicker';\n// TODO: delete casting when @types/react is updated!\nFlatColorPicker.propTypes = propTypes;\nFlatColorPicker.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}