{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { classNames, kendoThemeMaps, useAsyncFocusBlur, useCustomComponent, validatePackage } from '@progress/kendo-react-common';\nimport { packageMetadata } from '../package-metadata';\n;\n/**\n * Represents the [KendoReact TextBox component]({% slug overview_textbox %}).\n */\nexport var TextBox = React.forwardRef(function (props, ref) {\n  var _a;\n  validatePackage(packageMetadata);\n  var element = React.useRef(null);\n  var target = React.useRef(null);\n  var valueDuringChangeRef = React.useRef();\n  var valueGetter = React.useCallback(function () {\n    var _a;\n    if (valueDuringChangeRef.current !== undefined) {\n      return valueDuringChangeRef.current;\n    } else {\n      return (_a = element.current) === null || _a === void 0 ? void 0 : _a.value;\n    }\n  }, []);\n  React.useImperativeHandle(target, function () {\n    var result = {\n      element: element.current\n    };\n    Object.defineProperty(result, 'value', {\n      get: valueGetter\n    });\n    return result;\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var _b = props,\n    size = _b.size,\n    fillMode = _b.fillMode,\n    rounded = _b.rounded,\n    className = _b.className,\n    dir = _b.dir,\n    style = _b.style,\n    _c = _b.prefix,\n    prefix = _c === void 0 ? defaultProps.prefix : _c,\n    _d = _b.suffix,\n    suffix = _d === void 0 ? defaultProps.suffix : _d,\n    valid = _b.valid,\n    // Destruct to avoid warning when used inside a form field\n    _modified = _b.modified,\n    _touched = _b.touched,\n    _visited = _b.visited,\n    other = __rest(_b, [\"size\", \"fillMode\", \"rounded\", \"className\", \"dir\", \"style\", \"prefix\", \"suffix\", \"valid\", \"modified\", \"touched\", \"visited\"]);\n  var Prefix = useCustomComponent(prefix)[0];\n  var Suffix = useCustomComponent(suffix)[0];\n  var _e = React.useState(false),\n    focused = _e[0],\n    setFocused = _e[1];\n  var handleFocus = function handleFocus(_) {\n    setFocused(true);\n  };\n  var handleBlur = function handleBlur(_) {\n    setFocused(false);\n  };\n  var handleChange = React.useCallback(function (event) {\n    valueDuringChangeRef.current = event.target.value;\n    if (props.onChange) {\n      props.onChange.call(undefined, {\n        syntheticEvent: event,\n        nativeEvent: event.nativeEvent,\n        value: event.target.value,\n        target: target.current\n      });\n    }\n    valueDuringChangeRef.current = undefined;\n  }, [props.onChange]);\n  var _f = useAsyncFocusBlur({\n      onFocus: handleFocus,\n      onBlur: handleBlur,\n      onSyncFocus: props.onFocus,\n      onSyncBlur: props.onBlur\n    }),\n    onFocus = _f.onFocus,\n    onBlur = _f.onBlur;\n  return React.createElement(\"span\", {\n    style: style,\n    dir: dir,\n    className: classNames('k-input', (_a = {}, _a[\"k-input-\".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a[\"k-input-\".concat(fillMode)] = fillMode, _a[\"k-rounded-\".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a), {\n      'k-focus': focused,\n      'k-required': props.required,\n      'k-disabled': props.disabled,\n      'k-invalid': props.valid === false\n    }, className),\n    onFocus: onFocus,\n    onBlur: onBlur\n  }, React.createElement(Prefix, null), React.createElement(\"input\", __assign({\n    ref: element,\n    className: \"k-input-inner\"\n  }, other, {\n    onChange: handleChange\n  })), React.createElement(Suffix, null));\n});\nvar defaultProps = {\n  prefix: function prefix(_) {\n    return null;\n  },\n  suffix: function suffix(_) {\n    return null;\n  },\n  size: 'medium',\n  rounded: 'medium',\n  fillMode: 'solid'\n};\nTextBox.propTypes = {\n  size: PropTypes.oneOf([null, 'small', 'medium', 'large']),\n  rounded: PropTypes.oneOf([null, 'small', 'medium', 'large', 'full']),\n  fillMode: PropTypes.oneOf([null, 'solid', 'flat', 'outline'])\n};\nTextBox.displayName = 'KendoReactTextBoxComponent';\nTextBox.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}