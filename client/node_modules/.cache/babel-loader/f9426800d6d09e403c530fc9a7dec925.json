{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { classNames } from '@progress/kendo-react-common';\nimport { FormContext } from './FormContext';\n/**\n * Represents the KendoReact FormElement component.\n * It's small wrapper around HTML form element which automatically attach the\n * Form component's `onSubmit` render prop and Kendo CSS classes.\n * Other props are passed to the DOM node.\n */\nexport var FormElement = React.forwardRef(function (props, ref) {\n  var element = React.useRef(null);\n  var target = React.useRef(null);\n  React.useImperativeHandle(target, function () {\n    return {\n      element: element.current,\n      props: props\n    };\n  });\n  React.useImperativeHandle(ref, function () {\n    return target.current;\n  });\n  var form = React.useContext(FormContext);\n  var className = props.className,\n    onSubmit = props.onSubmit,\n    style = props.style,\n    horizontal = props.horizontal,\n    others = __rest(props, [\"className\", \"onSubmit\", \"style\", \"horizontal\"]);\n  var formClassName = classNames({\n    'k-form': true,\n    'k-form-horizontal': horizontal === true\n  }, className);\n  return React.createElement(\"form\", __assign({\n    ref: element\n  }, others, {\n    style: props.style,\n    className: formClassName,\n    onSubmit: form ? form.onSubmit : undefined\n  }), props.children);\n});\nFormElement.displayName = 'KendoReactFormElement';","map":null,"metadata":{},"sourceType":"module"}